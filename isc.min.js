function onClickPlayer(t)
{
    "use strict";

    // console.log("play");

    player ? player.togglePlay() : (player = new Player, player.initialize("canvas", "replayControls", "replayPlay"), player.load(t, function ()
    {
        player.togglePlay()
    }))
}

function handleUpload(evt) {
    var files = evt.target.files;
    f = files[0];

    var reader = new FileReader();

    // Closure to capture the file information.
    reader.onload = (function(theFile) {
        return function(e) {
            player = new Player;
            player.initialize("canvas", "replayControls", "replayPlay")
            player.state = "stopped";

            player.id = 0;
            player.replay.state = "stopped";
            player.replay.canvas.getTracerCaption = function (e, s) {
                // return t.users[e]
                return []
            }

            var a = e.target.result;
            o = new Uint8Array(a, 36);
            var h = new Zlib.Inflate(o);
            n = h.decompress();

            player.replay.instruction = n;


            // console.log(n);

            player.replayInitialized = true;
            player.replayControls.style.display = "block";
            player.replayPlay.style.display = "none";
            player.replay.setHtmlCanvas(player.setupCanvas())

            player.togglePlay();

        };
    })(f);

    reader.readAsArrayBuffer(f);
}

function onClickSpeed(t)
{
    "use strict";
    player.setSpeed(t)
}

function onClickTags()
{
    "use strict";
    player.toggleTags()
}
var IscEvent = function ()
    {
        function t()
        {}
        return t.prototype.subscribe = function (t)
        {
            this.triggers || (this.triggers = new Array), this.triggers.push(t)
        }, t.prototype.unsubscribe = function (t)
        {
            if (this.triggers)
                for (var e = this.triggers.length - 1; e >= 0; e--) this.triggers[e] === t && this.triggers.splice(e, 1)
        }, t.prototype.publish = function (t)
        {
            if (this.triggers)
                for (var e = 0; e < this.triggers.length; e++) this.triggers[e](t)
        }, t
    }(),
    IscBrush = function ()
    {
        function t()
        {
            this.o = 0, this.dist = 0, this.iter = 0, this.trackx = 0, this.tracky = 0, this.x1 = 0, this.y1 = 0, this.x2 = 0, this.y2 = 0, this.x3 = 0, this.y3 = 0, this.N = 1, this.brush = document.createElement("canvas"), this.brushCtx = this.brush.getContext("2d"), this.recreateBrush()
        }
        return Object.defineProperty(t.prototype, "brushSize",
        {
            set: function (t)
            {
                "use strict";
                this.N = t + 2
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color",
        {
            set: function (t)
            {
                "use strict";
                this.b = 255 & t, this.g = t >> 8 & 255, this.r = t >> 16 & 255
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.recreateBrush = function ()
        {
            "use strict";
            var t = this.N;
            this.brush.width = t, this.brush.height = t;
            for (var e = this.brushCtx.getImageData(0, 0, t, t), s = e.data, i = 320 / Math.sqrt(t) + 60, r = 0, n = (t - 1) / 2, o = -n; n >= o; o++)
                for (var a = -n; n >= a; a++)
                {
                    s[r++] = this.r, s[r++] = this.g, s[r++] = this.b;
                    var h = a / (n - .5),
                        c = o / (n - .5),
                        u = Math.sqrt(h * h + c * c);
                    s[r++] = Math.abs(u) > 1 ? 0 : (1 - Math.pow(u, 2)) * i
                }
            this.brushCtx.putImageData(e, 0, 0)
        }, t.prototype.bez = function (t, e, s, i, r)
        {
            "use strict";
            return (1 + r * (-3 + (3 - r) * r)) * t + r * (3 * e + r * (-6 * e + 3 * s + r * (3 * e - 3 * s + i)))
        }, t.prototype.line = function (t, e, s, i, r, n)
        {
            "use strict";
            if (e === this.trackx && s === this.tracky)
            {
                this.x3 = this.x2, this.y3 = this.y2, this.x2 = this.x1, this.y2 = this.y1;
                var o = 1 - .18 * n;
                this.x1 = i * o + this.x1 * (1 - o), this.y1 = r * o + this.y1 * (1 - o), this.trackx = i, this.tracky = r, this.iter++, this.iter >= 2 && (this.o = this.drawCurveSegment(t, this.x3, this.y3, this.x2, this.y2, this.x1, this.y1, this.o));
                var a = i - (this.x2 + this.x1) / 2,
                    h = r - (this.y2 + this.y1) / 2;
                return Math.sqrt(a * a + h * h)
            }
            return this.x3 = 0, this.y3 = 0, this.x2 = e, this.y2 = s, this.x1 = i, this.y1 = r, this.trackx = i, this.tracky = r, this.iter = 1, this.o = 0, this.dist = 0, 0
        }, t.prototype.drawCurveSegment = function (t, e, s, i, r, n, o, a)
        {
            "use strict";
            var h = 0,
                c = 0,
                u = 1,
                l = 1 - .776,
                d = .776,
                p = .5 * e + .5 * i,
                f = l * e + d * i,
                g = l * n + d * i,
                y = .5 * i + .5 * n,
                v = .5 * s + .5 * r,
                w = l * s + d * r,
                b = l * o + d * r,
                m = .5 * r + .5 * o,
                I = -3 * p + 9 * f - 9 * g + 3 * y,
                C = 6 * p - 12 * f + 6 * g,
                T = -3 * p + 3 * f,
                k = -3 * v + 9 * w - 9 * b + 3 * m,
                S = 6 * v - 12 * w + 6 * b,
                P = -3 * v + 3 * w,
                x = T,
                U = P,
                A = 3;
            if (x * x + U * U === 0) var M = 0,
                L = 0;
            else
            {
                for (var M = 1 / Math.sqrt(x * x + U * U), L = 0, B = 0, D = 0; A > D; D++)
                {
                    var x = L * L * I + L * C + T,
                        U = L * L * k + L * S + P,
                        M = a / A / Math.sqrt(x * x + U * U);
                    L += M, B += M
                }
                M = B
            }
            for (var E = 3 * this.N; 1 > L;)
            {
                if (this.dist < E)
                {
                    var O = 1 - this.dist / E;
                    u = Math.pow(1 - O * O, .5)
                }
                else u = 1;
                1 === u ? t.globalAlpha = 1 : 1 > u && (t.globalAlpha = u);
                var h = this.bez(p, f, g, y, L) + .5,
                    c = this.bez(v, w, b, m, L) + .5;
                t.drawImage(this.brush, 0, 0, this.N, this.N, h - this.N / 2 * u, c - this.N / 2 * u, this.N * u, this.N * u);
                for (var B = 0, D = 0; A > D; D++)
                {
                    var x = L * L * I + L * C + T,
                        U = L * L * k + L * S + P,
                        M = 1 / A / Math.sqrt(x * x + U * U);
                    L += M, B += M
                }
                M = B, A -= 1, 1 > A && (A = 1), this.dist += 1
            }
            return t.globalAlpha = 1, (L - 1) / M
        }, t
    }(),
    IscProgressInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscPoint = function ()
    {
        function t()
        {}
        return t
    }(),
    IscCanvas = function ()
    {
        function t(t)
        {
            if (void 0 === t && (t = !0), this.state = "uninitialized", this.tracingEnabled = !0, this.visibility = new Array, this.locks = new Array, this.transformed = new Array, this.zoomFactor = 1, this.offsetX = 0, this.offsetY = 0, this.previewLayers = new Array, this.previewContexts = new Array, this.updatePreviewTimer = 0, this.updatePreviewRequired = new Array, this.drawnSegments = 0, this.sx = 50, this.sy = 20, this.widthsPx = new Uint8Array(23), this.tools = new Uint8Array(23), this.colors = new Int32Array(23), this.layers = new Uint8Array(23), this.xCoords = new Int32Array(23), this.yCoords = new Int32Array(23), this.smooths = new Array(23), this.globalUserIds = new Int32Array(23), this.startTime = Date.now() - 36e5, this.lastUpdated = new Int32Array(23), this.penWidths = new Int32Array([1, 2, 3, 5, 14, 30]), this.dX0 = new Int32Array([-1, 0, 1, 2, -2, -1, 0, 1, 2, -2, -1, 1, 2, -2, -1, 0, 1, 2, -2, -1, 0, 1, 2]), this.dY0 = new Int32Array([-2, -2, -2, -2, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]), this.dX1 = new Int32Array([0, -2, -1, 0, 1, 2, -2, -1, 0, 1, 2, 3, -3, -2, -1, 0, 1, 2, 3, -3, -2, -1, 0, 1, 2, -2, -1, 0, 1, 2, 0]), this.dY1 = new Int32Array([-3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3]), this.instructionPointer = 0, this.currUserId = 0, this.bgFill = "#ffffff", this.onMerged = new IscEvent, this.onSegmentCountUpdated = new IscEvent, this.onFatalError = new IscEvent, this.getTracerCaption = function (t, e)
                {
                    return "Unknown"
                }, this.blurBuffer = new Uint8Array(256), this.blurKernels = {
                    2: [1, 2, 2, 2, 1],
                    1: [2, 4, 2]
                }, this.brushCache = {
                    length: 0
                }, "uninitialized" !== this.state) throw "Wrong state";
            this.canvas = new Array(document.createElement("canvas"), document.createElement("canvas"), document.createElement("canvas"), document.createElement("canvas"), document.createElement("canvas")), this.contexts = new Array(this.canvas[0].getContext("2d"), this.canvas[1].getContext("2d"), this.canvas[2].getContext("2d"), this.canvas[3].getContext("2d"), this.canvas[4].getContext("2d")), this.checkerBoardImage = new Image, t && (this.checkerBoardImage.src = "assets/images/transparentBoard.png"), this.checkerBoardImagePreview = new Image, t && (this.checkerBoardImagePreview.src = "assets/images/transparentBoardPreview.png"), this.setSize(700, 376);
            for (var e = 0; e < this.canvas.length; e++) this.visibility[e] = !0, this.locks[e] = !1, this.transformed[e] = !0;
            this.previewCtx = this.contexts[3], this.previewCtx.globalAlpha = .7, this.tracerCtx = this.contexts[4], this.transformed[4] = !1, this.tracerCanvasStyle = this.canvas[4].style.display, this.gradientStops0 = new Array("rgba(163,219,255,0.7)", "rgba(255,195,163,0.7)", "rgba(179,239,173,0.7)"), this.gradientStops1 = new Array("rgba(163,219,255,0)", "rgba(255,195,163,0)", "rgba(179,239,173,0)"), this.bgFill = "#f1f7ff", this.clearCanvas(), this.state = "initialized", this.updatePreviewAll()
        }
        return t.prototype.setSize = function (t, e)
        {
            "use strict";
            this.width = t, this.height = e, this.fullWidth = t + 2 * this.sx, this.fullHeight = e + 2 * this.sy;
            for (var s = 0; s < this.canvas.length; s++) this.canvas[s].width = this.fullWidth, this.canvas[s].height = this.fullHeight, this.contexts[s].lineCap = "round", this.contexts[s].beginPath(), this.contexts[s].rect(0, 0, this.canvas[s].width, this.canvas[s].height)
        }, t.prototype.setHtmlCanvas = function (t)
        {
            "use strict";
            null != t ? (this.outputCanvas = t, this.outputContext = this.outputCanvas.getContext("2d"), this.outputContext.mozImageSmoothingEnabled = !1, this.outputContext.webkitImageSmoothingEnabled = !1, this.outputContext.msImageSmoothingEnabled = !1, this.outputContext.imageSmoothingEnabled = !1, this.cleanRecompose()) : (this.outputCanvas = null, this.outputContext = null)
        }, t.prototype.setHtmlPreviewCanvas = function (t, e)
        {
            "use strict";
            var s = this;
            this.previewLayers[t] = e, this.previewContexts[t] = null != e ? e.getContext("2d") : null;
            for (var i = !1, r = 0; r < this.previewLayers.length; r++) this.previewLayers[r] && (i = !0);
            i && 0 === this.updatePreviewTimer ? this.updatePreviewTimer = setInterval(function ()
            {
                s.updatePreviews()
            }, 250) : i || 0 === this.updatePreviewTimer || (clearInterval(this.updatePreviewTimer), this.updatePreviewTimer = 0)
        }, t.prototype.flashBlurInternal = function (t, e, s, i, r, n)
        {
            "use strict";
            var o = 0 | n,
                a = 0 | i,
                h = 0 | r,
                c = 2 * o + 1 | 0,
                u = t.getImageData(e - o, s - o, a + 2 * o, h + 2 * o),
                l = u.data,
                d = this.blurKernels[o],
                p = a + 2 * o | 0,
                f = 4 * (o + o * p) | 0,
                g = 0,
                y = 0,
                v = 0,
                w = 0,
                b = 0,
                m = 0,
                I = 0,
                C = 0,
                T = this.blurBuffer;
            for (b = 0; h > b; b = b + 1 | 0)
            {
                for (m = 0; a > m; m = m + 1 | 0)
                {
                    for (g = 0, y = 0, v = 0, w = 0, I = 4 * (m - o + b * p) + f | 0, C = 0; c > C; C = C + 1 | 0)
                    {
                        var k = l[I + 3] * d[C] | 0;
                        w = w + k | 0;
                        var S = l[I];
                        g = g + S * S * k | 0;
                        var P = l[I + 1];
                        y = y + P * P * k | 0;
                        var x = l[I + 2];
                        v = v + x * x * k | 0, I = I + 4 | 0
                    }
                    0 === w && (w = g + y + v | 0), T[4 * m] = Math.sqrt(g / w) + .25 | 0, T[4 * m + 1] = Math.sqrt(y / w) + .25 | 0, T[4 * m + 2] = Math.sqrt(v / w) + .25 | 0, T[4 * m + 3] = w / 8 + .25 | 0
                }
                for (I = b * p * 4 + f | 0, m = 0; a > m; m = m + 1 | 0) l[I] = T[4 * m], l[I + 1] = T[4 * m + 1], l[I + 2] = T[4 * m + 2], l[I + 3] = T[4 * m + 3], I = I + 4 | 0
            }
            for (m = 0; a > m; m = m + 1 | 0)
            {
                for (b = 0; h > b; b = b + 1 | 0)
                {
                    for (g = 0, y = 0, v = 0, w = 0, I = 4 * (m + (b - o) * p) + f | 0, C = 0; c > C; C = C + 1 | 0)
                    {
                        var k = l[I + 3] * d[C] | 0;
                        w = w + k | 0;
                        var S = l[I];
                        g = g + S * S * k | 0;
                        var P = l[I + 1];
                        y = y + P * P * k | 0;
                        var x = l[I + 2];
                        v = v + x * x * k | 0, I = I + 4 * p | 0
                    }
                    0 === w && (w = g + y + v | 0), T[4 * b] = Math.sqrt(g / w) + .25 | 0, T[4 * b + 1] = Math.sqrt(y / w) + .25 | 0, T[4 * b + 2] = Math.sqrt(v / w) + .25 | 0, T[4 * b + 3] = w / 8 + .25 | 0
                }
                for (I = 4 * m + f | 0, b = 0; h > b; b = b + 1 | 0) l[I] = T[4 * b], l[I + 1] = T[4 * b + 1], l[I + 2] = T[4 * b + 2], l[I + 3] = T[4 * b + 3], I = I + 4 * p | 0
            }
            t.putImageData(u, e - o, s - o)
        }, t.prototype.getAverageAroundInternal = function (t, e, s, i, r, n)
        {
            "use strict";
            var o, a, h, c = 2 * i + 1,
                u = t.getImageData(e - i, s - i, c, c),
                l = u.data,
                d = 0,
                p = 0,
                f = 0,
                g = 0;
            if (r)
            {
                for (o = -i; i >= o; o++)
                    for (a = -i; i >= a; a++)
                        if (i * i >= o * o + a * a)
                        {
                            h = 4 * (i + o + (i + a) * c) | 0;
                            var y = l[h + 3];
                            g += y;
                            var v = l[h];
                            d += v * v * y | 0;
                            var w = l[h + 1];
                            p += w * w * y | 0;
                            var b = l[h + 2];
                            f += b * b * y | 0
                        }
            }
            else
                for (o = -i; i >= o; o++)
                    for (a = -i; i >= a; a++)
                        if (i * i >= o * o + a * a)
                        {
                            h = 4 * (i + o + (i + a) * c) | 0, g++;
                            var v = l[h];
                            d += v * v | 0;
                            var w = l[h + 1];
                            p += w * w | 0;
                            var b = l[h + 2];
                            f += b * b | 0
                        } return g > 0 ? (d = 0 | Math.sqrt(d / g), p = 0 | Math.sqrt(p / g), f = 0 | Math.sqrt(f / g), "#" + ("000000" + (f + (p << 8) + (d << 16)).toString(16)).substr(-6)) : n
        }, t.prototype.visibleColorAt = function (t, e)
        {
            "use strict";
            var s = 0,
                i = 0,
                r = 0,
                n = 0,
                o = 0;
            return this.visibility[2] && (n = e.bitmapTop[t + 3], o += n, s += e.bitmapTop[t + 2] * n, i += e.bitmapTop[t + 1] * n, r += e.bitmapTop[t] * n), this.visibility[1] && (n = (255 - o) / 255 * e.bitmapMid[t + 3], o += n, s += e.bitmapMid[t + 2] * n, i += e.bitmapMid[t + 1] * n, r += e.bitmapMid[t] * n), this.visibility[0] && (n = 255 - o, o += n, s += e.bitmapBot[t + 2] * n, i += e.bitmapBot[t + 1] * n, r += e.bitmapBot[t] * n), 0 === o ? e.bgColor : (s /= o, i /= o, r /= o, (0 | s) + 256 * (0 | i) + 65536 * (0 | r) + 16777216 * o)
        }, t.prototype.getVisibleAverageAroundInternal = function (t, e, s)
        {
            "use strict";
            for (var i = 2 * s + 1, r = this.contexts[2].getImageData(t - s, e - s, i, i), n = r.data, o = this.contexts[1].getImageData(t - s, e - s, i, i), a = o.data, h = this.contexts[0].getImageData(t - s, e - s, i, i), c = h.data, u = 0, l = 0, d = 0, p = 0, f = parseInt(this.bgFill.substr(1), 16), g = {
                    bitmapTop: n,
                    bitmapMid: a,
                    bitmapBot: c,
                    bgColor: f
                }, y = -s; s >= y; y++)
                for (var v = -s; s >= v; v++)
                    if (s * s >= y * y + v * v)
                    {
                        var w = 4 * (s + y + (s + v) * i),
                            b = this.visibleColorAt(w, g),
                            m = b / 16777216 & 255;
                        p += m, d += (255 & b) * m, l += (b / 256 & 255) * m, u += (b / 65536 & 255) * m
                    }
            return p > 0 ? (u /= p, l /= p, d /= p, (0 | d) + 256 * (0 | l) + 65536 * (0 | u)) : f
        }, t.prototype.readHeader = function ()
        {
            "use strict";
            var t = this.instructions[12] + 256 * (this.instructions[13] + 256 * (this.instructions[14] + 256 * this.instructions[15]));
            this.bgFill = "#" + ("000000" + t.toString(16)).substr(-6), this.protocol = this.instructions[6], this.instructionPointer = 32
        }, t.prototype.setBgFill = function (t)
        {
            "use strict";
            this.bgFill = t
        }, t.prototype.setStream = function (t, e)
        {
            "use strict";
            this.instructions = t, this.instructionPointer = e
        }, t.prototype.clearCanvas = function ()
        {
            "use strict";
            this.contexts[0].fillStyle = this.bgFill, this.contexts[0].beginPath(), this.contexts[0].rect(0, 0, this.fullWidth, this.fullHeight), this.contexts[0].fill(), this.contexts[1].clearRect(0, 0, this.fullWidth, this.fullHeight), this.contexts[2].clearRect(0, 0, this.fullWidth, this.fullHeight), this.clearTracers(!1), this.recompose(), this.updatePreviewAll(), this.drawnSegments = 0
        }, t.prototype.clearPreviewCanvas = function ()
        {
            "use strict";
            this.previewCtx.clearRect(0, 0, this.fullWidth, this.fullHeight)
        }, t.prototype.clearTracers = function (t)
        {
            "use strict";
            void 0 === t && (t = !0), this.tracerCtx.clearRect(this.sx, this.sy, this.width, this.height), t && this.recompose()
        }, Object.defineProperty(t.prototype, "isTracingEnabled",
        {
            get: function ()
            {
                "use strict";
                return this.tracingEnabled
            },
            set: function (t)
            {
                "use strict";
                this.tracingEnabled = t
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "showTracers",
        {
            get: function ()
            {
                "use strict";
                return this.visibility[4]
            },
            set: function (t)
            {
                "use strict";
                this.visibility[4] = t, this.recompose()
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.expireTracers = function ()
        {
            "use strict";
            for (var t = 0; 23 > t; t++) this.lastUpdated[t] = 0;
            this.clearTracers()
        }, t.prototype.drawTracers = function ()
        {
            "use strict";
            this.clearTracers(!1);
            for (var t = Date.now() - this.startTime | 0, e = 0; 23 > e; e++)
                if (t - this.lastUpdated[e] < 500)
                {
                    var s = this.boardToHostCoords(this.xCoords[e] - this.sx, this.yCoords[e] - this.sy);
                    s.x += this.sx, s.y += this.sy;
                    var i = this.tracerCtx.createLinearGradient(s.x, s.y, s.x + 100, s.y);
                    i.addColorStop(0, this.gradientStops0[this.layers[e]]), i.addColorStop(1, this.gradientStops1[this.layers[e]]), this.tracerCtx.fillStyle = i, this.tracerCtx.beginPath(), this.tracerCtx.rect(s.x, s.y, 100, 15), this.tracerCtx.fill(), this.tracerCtx.fillStyle = "black", this.tracerCtx.font = "bold 12px Arial", this.tracerCtx.textBaseline = "top", this.tracerCtx.fillText(this.getTracerCaption(this.globalUserIds[e], e), s.x + 2, s.y + 1)
                }
        }, t.prototype.getProgress = function ()
        {
            "use strict";
            var t = new IscProgressInfo;
            return t.position = this.instructionPointer, t.total = this.instructions.length, t
        }, Object.defineProperty(t.prototype, "protocol",
        {
            get: function ()
            {
                "use strict";
                return this.currentProtocol
            },
            set: function (t)
            {
                "use strict";
                this.currentProtocol = t
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.drawFrames = function (t)
        {
            "use strict";
            void 0 === t && (t = 4294967295);
            try
            {
                if (0 === this.currentProtocol) return this.drawFrames0(t);
                if (1 === this.currentProtocol) return this.drawFrames1(t)
            }
            catch (e)
            {
                this.onFatalError.publish(e)
            }
        }, t.prototype.drawFrames0 = function (t)
        {
            "use strict";
            var e = this;
            null != this.tracerTimer && (clearInterval(this.tracerTimer), this.tracerTimer = null, this.clearTracers());
            var s = Date.now() - this.startTime | 0;
            this.lastUpdated[this.currUserId] = s, t || (t = Math.pow(2, 32) - 1);
            for (var i = 0; t > i; i++)
            {
                if (this.instructionPointer >= this.instructions.length) return this.tracingEnabled && (this.drawTracers(), this.tracerTimer = setTimeout(function ()
                {
                    e.clearTracers()
                }, 500)), this.recompose(), !0;
                var r = this.contexts[this.layers[this.currUserId]];
                this.lastUpdated[this.currUserId] = s;
                var n = this.instructions[this.instructionPointer] - 1;
                switch (7 & n)
                {
                case 7:
                    var o = this.widthsPx[this.currUserId],
                        a = n >> 3,
                        h = this.dX0[a],
                        c = this.dY0[a];
                    this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], this.xCoords[this.currUserId] += h, this.yCoords[this.currUserId] += c, h, c, this.colors[this.currUserId], o, this.layers[this.currUserId] > 0, this.smooths[this.currUserId], this.currUserId), ++this.instructionPointer;
                    break;
                case 0:
                    var u = this.instructions[this.instructionPointer + 1],
                        l = 184 * (u - 1) + n >> 3,
                        o = this.widthsPx[this.currUserId],
                        h = l % 65 - 32,
                        c = (l - l % 65) / 65 - 32;
                    this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], this.xCoords[this.currUserId] += h, this.yCoords[this.currUserId] += c, h, c, this.colors[this.currUserId], o, this.layers[this.currUserId] > 0, this.smooths[this.currUserId], this.currUserId), this.instructionPointer += 2;
                    break;
                case 3:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        l = 184 * (184 * (d - 1) + (u - 1)) + n >> 3;
                    this.xCoords[this.currUserId] = l % 1008, this.yCoords[this.currUserId] = (l - l % 1008) / 1008, this.instructionPointer += 3;
                    break;
                case 2:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        p = this.instructions[this.instructionPointer + 3];
                    this.colors[this.currUserId] = 184 * (184 * (184 * (p - 1) + (d - 1)) + (u - 1)) + n >> 3, this.instructionPointer += 4;
                    break;
                case 4:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        l = 184 * (184 * (d - 1) + (u - 1)) + n >> 3,
                        o = this.widthsPx[this.currUserId],
                        f = l % 1008,
                        g = (l - l % 1008) / 1008,
                        y = this.xCoords[this.currUserId],
                        v = this.yCoords[this.currUserId],
                        h = f - y,
                        c = g - v,
                        w = this.colors[this.currUserId],
                        b = this.layers[this.currUserId] > 0;
                    this.xCoords[this.currUserId] = f, this.yCoords[this.currUserId] = g, this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], f, g, h, c, w, o, b, this.smooths[this.currUserId], this.currUserId), this.instructionPointer += 3;
                    break;
                case 5:
                    var m = n >> 3;
                    if (6 > m) this.widthsPx[this.currUserId] = this.penWidths[m];
                    else switch (m)
                    {
                    case 7:
                        this.tools[this.currUserId] = 0;
                        break;
                    case 8:
                        this.tools[this.currUserId] = 1;
                        break;
                    case 9:
                        this.tools[this.currUserId] = 2;
                        break;
                    case 10:
                        this.tools[this.currUserId] = 3;
                        break;
                    case 11:
                        this.tools[this.currUserId] = 4;
                        break;
                    case 20:
                        this.tools[this.currUserId] = 5;
                        break;
                    case 12:
                        this.layers[this.currUserId] = 0;
                        break;
                    case 13:
                        this.layers[this.currUserId] = 1;
                        break;
                    case 14:
                        this.layers[this.currUserId] = 2;
                        break;
                    case 15:
                        this.contexts[0].drawImage(this.canvas[1], 0, 0), this.contexts[0].drawImage(this.canvas[2], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.contexts[2].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 16:
                        this.contexts[1].drawImage(this.canvas[2], 0, 0), this.contexts[2].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 17:
                        this.contexts[0].drawImage(this.canvas[1], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 18:
                        this.contexts[1].drawImage(this.canvas[2], 0, 0), this.contexts[2].clearRect(0, 0, 800, 476), this.contexts[2].drawImage(this.canvas[1], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 19:
                        var u = this.instructions[this.instructionPointer + 1],
                            d = this.instructions[this.instructionPointer + 2],
                            p = this.instructions[this.instructionPointer + 3],
                            I = this.instructions[this.instructionPointer + 4],
                            C = this.instructions[this.instructionPointer + 5],
                            l = 184 * (184 * (184 * (184 * (C - 1) + (I - 1)) + (p - 1)) + (d - 1)) + (u - 1);
                        this.currUserId = l % 23, this.globalUserIds[this.currUserId] = (l - this.currUserId) / 23, this.tools[this.currUserId] = 0, this.layers[this.currUserId] = 0, this.widthsPx[this.currUserId] = 1, this.instructionPointer += 5;
                        break;
                    default:
                        this.tools[this.currUserId] = -1
                    }
                    this.instructionPointer++;
                    break;
                case 6:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2];
                    this.instructionPointer += 3;
                    var l = 184 * (184 * (d - 1) + (u - 1)) + n >> 3;
                    this.currUserId = l % 23, this.globalUserIds[this.currUserId] = (l - this.currUserId) / 23, this.tools[this.currUserId] = 0, this.layers[this.currUserId] = 0, this.widthsPx[this.currUserId] = 1;
                    break;
                case 1:
                    this.currUserId = n >> 3, this.instructionPointer++
                }
            }
            return this.tracingEnabled && this.drawTracers(), this.recompose(), !1
        }, t.prototype.drawFrames1 = function (t)
        {
            "use strict";
            var e = this;
            null != this.tracerTimer && (clearInterval(this.tracerTimer), this.tracerTimer = null, this.clearTracers());
            var s = Date.now() - this.startTime | 0;
            this.lastUpdated[this.currUserId] = s, t || (t = Math.pow(2, 32) - 1);
            for (var i = 0; t > i; i++)
            {
                if (this.instructionPointer >= this.instructions.length) return this.tracingEnabled && (this.drawTracers(), this.tracerTimer = setTimeout(function ()
                {
                    e.clearTracers()
                }, 500)), this.recompose(), !0;
                var r = this.contexts[this.layers[this.currUserId]];
                this.lastUpdated[this.currUserId] = s;
                var n = this.instructions[this.instructionPointer] - 1;
                switch (7 & n)
                {
                case 7:
                    var o = this.widthsPx[this.currUserId],
                        a = n >> 3,
                        h = this.dX1[a],
                        c = this.dY1[a];
                    this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], this.xCoords[this.currUserId] += h, this.yCoords[this.currUserId] += c, h, c, this.colors[this.currUserId], o, this.layers[this.currUserId] > 0, this.smooths[this.currUserId], this.currUserId), ++this.instructionPointer;
                    break;
                case 0:
                    var u = this.instructions[this.instructionPointer + 1],
                        l = 248 * (u - 1) + n >> 3,
                        o = this.widthsPx[this.currUserId],
                        h = l % 87 - 43,
                        c = (l - l % 87) / 87 - 43;
                    this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], this.xCoords[this.currUserId] += h, this.yCoords[this.currUserId] += c, h, c, this.colors[this.currUserId], o, this.layers[this.currUserId] > 0, this.smooths[this.currUserId], this.currUserId), this.instructionPointer += 2;
                    break;
                case 3:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        p = this.instructions[this.instructionPointer + 3],
                        l = 248 * (255 * (255 * (p - 1) + (d - 1)) + (u - 1)) + n >> 3;
                    this.xCoords[this.currUserId] = l % 21632, this.yCoords[this.currUserId] = (l - l % 21632) / 21632, this.instructionPointer += 4;
                    break;
                case 2:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        p = this.instructions[this.instructionPointer + 3];
                    this.colors[this.currUserId] = 248 * (255 * (255 * (p - 1) + (d - 1)) + (u - 1)) + n >> 3, this.instructionPointer += 4;
                    break;
                case 4:
                    var u = this.instructions[this.instructionPointer + 1],
                        d = this.instructions[this.instructionPointer + 2],
                        p = this.instructions[this.instructionPointer + 3],
                        l = 248 * (255 * (255 * (p - 1) + (d - 1)) + (u - 1)) + n >> 3,
                        o = this.widthsPx[this.currUserId],
                        f = l % 21632,
                        g = (l - l % 21632) / 21632,
                        y = this.xCoords[this.currUserId],
                        v = this.yCoords[this.currUserId],
                        h = f - y,
                        c = g - v,
                        w = this.colors[this.currUserId],
                        b = this.layers[this.currUserId] > 0;
                    this.xCoords[this.currUserId] = f, this.yCoords[this.currUserId] = g, this.drawWithToolInternal(this.layers[this.currUserId], r, this.tools[this.currUserId], f, g, h, c, w, o, b, this.smooths[this.currUserId], this.currUserId), this.instructionPointer += 4;
                    break;
                case 5:
                    var m = n >> 3;
                    switch (m)
                    {
                    case 7:
                        this.tools[this.currUserId] = 0;
                        break;
                    case 8:
                        this.tools[this.currUserId] = 1;
                        break;
                    case 9:
                        this.tools[this.currUserId] = 2;
                        break;
                    case 10:
                        this.tools[this.currUserId] = 3;
                        break;
                    case 11:
                        this.tools[this.currUserId] = 4;
                        break;
                    case 20:
                        this.tools[this.currUserId] = 5;
                        break;
                    case 12:
                        this.layers[this.currUserId] = 0;
                        break;
                    case 13:
                        this.layers[this.currUserId] = 1;
                        break;
                    case 14:
                        this.layers[this.currUserId] = 2;
                        break;
                    case 15:
                        this.contexts[0].drawImage(this.canvas[1], 0, 0), this.contexts[0].drawImage(this.canvas[2], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.contexts[2].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 16:
                        this.contexts[1].drawImage(this.canvas[2], 0, 0), this.contexts[2].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 17:
                        this.contexts[0].drawImage(this.canvas[1], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 18:
                        this.contexts[1].drawImage(this.canvas[2], 0, 0), this.contexts[2].clearRect(0, 0, 800, 476), this.contexts[2].drawImage(this.canvas[1], 0, 0), this.contexts[1].clearRect(0, 0, 800, 476), this.updatePreviewAll(), this.onMerged.publish(null);
                        break;
                    case 19:
                        var u = this.instructions[this.instructionPointer + 1],
                            d = this.instructions[this.instructionPointer + 2],
                            p = this.instructions[this.instructionPointer + 3],
                            I = this.instructions[this.instructionPointer + 4],
                            l = 255 * (255 * (255 * (I - 1) + (p - 1)) + (d - 1)) + (u - 1);
                        this.currUserId = l % 31, this.globalUserIds[this.currUserId] = (l - this.currUserId) / 31, this.tools[this.currUserId] = 0, this.layers[this.currUserId] = 0, this.widthsPx[this.currUserId] = 1, this.instructionPointer += 4;
                        break;
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                        this.smooths[this.currUserId] = m - 21;
                        break;
                    default:
                        this.tools[this.currUserId] = -1
                    }
                    this.instructionPointer++;
                    break;
                case 6:
                    this.widthsPx[this.currUserId] = (n >> 3) + 1, this.instructionPointer++;
                    break;
                case 1:
                    this.currUserId = n >> 3, this.instructionPointer++
                }
            }
            return this.tracingEnabled && this.drawTracers(), this.recompose(), !1
        }, t.prototype.updatePreviewAll = function ()
        {
            this.updatePreviewRequired[0] = !0, this.updatePreviewRequired[1] = !0, this.updatePreviewRequired[2] = !0
        }, t.prototype.cleanRecompose = function ()
        {
            "use strict";
            null != this.outputContext && (this.outputContext.clearRect(0, 0, this.width, this.height), this.recompose())
        }, t.prototype.recompose = function ()
        {
            "use strict";
            if (null != this.outputContext)
            {
                this.visibility[0] || this.outputContext.drawImage(this.checkerBoardImage, 0, 0);
                for (var t = 0; t < this.layers.length; t++) this.visibility[t] && (this.transformed[t] ? this.outputContext.drawImage(this.canvas[t], -this.offsetX + this.sx, -this.offsetY + this.sy, this.width / this.zoomFactor, this.height / this.zoomFactor, 0, 0, this.width, this.height) : this.outputContext.drawImage(this.canvas[t], this.sx, this.sy, this.width, this.height, 0, 0, this.width, this.height))
            }
        }, t.prototype.updatePreviews = function ()
        {
            "use strict";
            for (var t = !1, e = 0; 3 > e; e++)
                if (this.updatePreviewRequired[e])
                {
                    this.updatePreviewRequired[e] = !1, t = !0;
                    var s = this.previewContexts[e];
                    if (null != s && (e > 0 && s.drawImage(this.checkerBoardImagePreview, 0, 0), s.drawImage(this.canvas[e], this.sx, this.sy, this.width, this.height, 0, 0, this.previewLayers[e].width, this.previewLayers[e].height), this.locks[e]))
                    {
                        var i = this.previewLayers[e].height,
                            r = this.previewLayers[e].width,
                            n = .4 * i;
                        s.globalAlpha = .5, s.fillStyle = "#ffffff", s.beginPath(), s.rect(0, 0, r, i), s.fill(), s.globalAlpha = 1, this.lineInternal(s, r / 2 - n, i / 2 - n, r / 2 + n, i / 2 + n, 5, 8421504), this.lineInternal(s, r / 2 + n, i / 2 - n, r / 2 - n, i / 2 + n, 5, 8421504)
                    }
                }
            t && this.onSegmentCountUpdated.publish(this.segmentCount)
        }, t.prototype.setOffset = function (t, e)
        {
            "use strict";
            0 > -t && (t = 0), 0 > -e && (e = 0), -t > this.width - this.width / this.zoomFactor && (t = -(this.width - this.width / this.zoomFactor)), -e > this.height - this.height / this.zoomFactor && (e = -(this.height - this.height / this.zoomFactor)), this.offsetX = 0 | t, this.offsetY = 0 | e, this.cleanRecompose()
        }, t.prototype.getOffset = function ()
        {
            "use strict";
            var t = new IscPoint;
            return t.x = this.offsetX, t.y = this.offsetY, t
        }, t.prototype.setZoom = function (t)
        {
            "use strict";
            this.zoomFactor = t, this.cleanRecompose()
        }, t.prototype.getZoom = function ()
        {
            "use strict";
            return this.zoomFactor
        }, t.prototype.setLayerVisibility = function (t, e)
        {
            "use strict";
            this.visibility[t] = e, this.recompose()
        }, t.prototype.getLayerVisibility = function (t)
        {
            "use strict";
            return this.visibility[t]
        }, t.prototype.setLayerLock = function (t, e)
        {
            "use strict";
            this.locks[t] = e, this.updatePreviewAll()
        }, t.prototype.getLayerLock = function (t)
        {
            "use strict";
            return this.locks[t]
        }, t.prototype.blurInternal = function (t, e, s, i)
        {
            "use strict";
            var r = 1 === i ? 1 : 2;
            i % 2 === 1 && i++, 30 === i ? i = 34 : i += 2, this.flashBlurInternal(t, e - i % 2 - i / 2, s - i % 2 - i / 2, i, i, r)
        }, t.prototype.lineInternal = function (t, e, s, i, r, n, o)
        {
            "use strict";
            e === i && s === r ? (t.fillStyle = "#" + ("000000" + o.toString(16)).substr(-6), 1 === n ? (t.beginPath(), t.rect(i, r, 1, 1), t.fill()) : (t.beginPath(), t.arc(i, r, n / 2, 0, 2 * Math.PI, !0), t.fill()), t.moveTo(i + n % 2 / 2, r + n % 2 / 2)) : (t.beginPath(), t.lineWidth = n, t.strokeStyle = "#" + ("000000" + o.toString(16)).substr(-6), t.moveTo(e + n % 2 / 2, s + n % 2 / 2), 1 === n && (1 === Math.abs(i) ? 1 : 0) ^ (1 === Math.abs(r) ? 1 : 0) && (t.globalAlpha = .5), t.lineTo(i + n % 2 / 2, r + n % 2 / 2), t.stroke(), t.globalAlpha < 1 && (t.globalAlpha = 1))
        }, t.prototype.brushInternal = function (t, e, s, i, r, n, o, a, h)
        {
            "use strict";
            var c = 100 * (64 * o + h + 1) + n,
                u = this.brushCache[c];
            return u || (this.brushCache.length > 30 && (this.brushCache = {
                length: 0
            }), u = new IscBrush, u.brushSize = n, u.color = o, u.recreateBrush(), this.brushCache[c] = u), u.line(t, e, s, i, r, a)
        }, t.prototype.roundRectInternal = function (t, e, s, i, r, n, o, a)
        {
            "use strict";
            t.beginPath(), t.moveTo(e + n, s), t.lineTo(e + i - n, s), t.quadraticCurveTo(e + i, s, e + i, s + n), t.lineTo(e + i, s + r - n), t.quadraticCurveTo(e + i, s + r, e + i - n, s + r), t.lineTo(e + n, s + r), t.quadraticCurveTo(e, s + r, e, s + r - n), t.lineTo(e, s + n), t.quadraticCurveTo(e, s, e + n, s), t.closePath(), o && t.fill(), a && t.stroke()
        }, t.prototype.autoCircleInternal = function (t, e, s, i, r)
        {
            "use strict";
            t.globalAlpha = .25, t.fillStyle = this.getAverageAroundInternal(t, e, s, i / 2, r, this.bgFill), t.beginPath(), t.arc(e, s, i / 2, 0, 2 * Math.PI, !0), t.fill(), t.globalAlpha = 1
        }, t.prototype.circleInternal = function (t, e, s, i, r)
        {
            "use strict";
            t.globalAlpha = .25, t.fillStyle = "#" + ("000000" + r.toString(16)).substr(-6), t.beginPath(), t.arc(e, s, i / 2, 0, 2 * Math.PI, !0), t.fill(), t.globalAlpha = 1
        }, t.prototype.eraserInternal = function (t, e, s, i, r)
        {
            "use strict";
            t.globalCompositeOperation = r ? "destination-out" : "source-over", t.fillStyle = this.bgFill, t.fillRect(e - (i - i % 2) / 2, s - (i - i % 2) / 2, i, i), t.globalCompositeOperation = "source-over"
        }, t.prototype.drawWithToolInternal = function (t, e, s, i, r, n, o, a, h, c, u, l)
        {
            "use strict";
            switch (this.updatePreviewRequired[t] = !0, s)
            {
            case 0:
                this.lineInternal(e, i - n, r - o, i, r, h, a);
                break;
            case 1:
                this.blurInternal(e, i, r, h);
                break;
            case 2:
                this.autoCircleInternal(e, i, r, h, c);
                break;
            case 3:
                this.circleInternal(e, i, r, h, a);
                break;
            case 4:
                this.eraserInternal(e, i, r, h, c);
                break;
            case 5:
                return this.brushInternal(e, i - n, r - o, i, r, h, a, u, l)
            }
            this.drawnSegments++
        }, t.prototype.hostToBoardCoords = function (t, e)
        {
            "use strict";
            var s = new IscPoint;
            return s.x = t / this.zoomFactor - this.offsetX | 0, s.y = e / this.zoomFactor - this.offsetY | 0, s
        }, t.prototype.boardToHostCoords = function (t, e)
        {
            "use strict";
            var s = new IscPoint;
            return s.x = (t + this.offsetX) * this.zoomFactor, s.y = (e + this.offsetY) * this.zoomFactor, s
        }, t.prototype.segmentDrawn = function (t)
        {
            "use strict";
            this.updatePreviewRequired[t] = !0, this.drawnSegments++
        }, t.prototype.drawLine = function (t, e, s, i, r, n, o)
        {
            "use strict";
            3 > t && this.segmentDrawn(t), this.lineInternal(this.contexts[t], e + this.sx, s + this.sy, i + this.sx, r + this.sy, n, o), this.recompose()
        }, t.prototype.drawBrush = function (t, e, s, i, r, n, o, a)
        {
            "use strict";
            3 > t && this.segmentDrawn(t);
            var h = this.brushInternal(this.contexts[t], e + this.sx, s + this.sy, i + this.sx, r + this.sy, n, o, a, -1);
            return this.recompose(), h
        }, t.prototype.drawAutoCircle = function (t, e, s, i)
        {
            "use strict";
            3 > t && this.segmentDrawn(t), this.autoCircleInternal(this.contexts[t], e + this.sx, s + this.sy, i, t > 0), this.recompose()
        }, t.prototype.drawCircle = function (t, e, s, i, r)
        {
            "use strict";
            3 > t && this.segmentDrawn(t), this.circleInternal(this.contexts[t], e + this.sx, s + this.sy, i, r), this.recompose()
        }, t.prototype.drawEraser = function (t, e, s, i)
        {
            "use strict";
            3 > t && this.segmentDrawn(t), this.eraserInternal(this.contexts[t], e + this.sx, s + this.sy, i, t > 0), this.recompose()
        }, t.prototype.drawBlur = function (t, e, s, i)
        {
            "use strict";
            3 > t && this.segmentDrawn(t), this.blurInternal(this.contexts[t], e + this.sx, s + this.sy, i), this.recompose()
        }, t.prototype.getPreviewLayerId = function ()
        {
            "use strict";
            return 3
        }, t.prototype.areaPick = function (t, e, s)
        {
            "use strict";
            return this.getVisibleAverageAroundInternal(t + this.sx, e + this.sy, Math.round(s / 2))
        }, t.prototype.pick = function (t, e)
        {
            "use strict";
            return this.getVisibleAverageAroundInternal(t + this.sx, e + this.sy, 0)
        }, t.prototype.drawEraserPreview = function (t, e, s)
        {
            "use strict";
            var i = this.contexts[3];
            i.fillStyle = "#000000";
            var r = t - Math.floor(s / 2) + this.sx | 0,
                n = e - Math.floor(s / 2) + this.sy | 0;
            this.roundRectInternal(i, r, n, s, s, 2, !0, !1), this.recompose()
        }, t.prototype.drawBlurPreview = function (t, e, s, i)
        {
            "use strict";
            var r = this.contexts[3];
            r.lineWidth = .3, r.strokeStyle = "#000000";
            var n = e - i / 2 + this.sx | 0,
                o = s - i / 2 + this.sy | 0;
            null == this.blurTempCtx && (this.blurTempCanvas = document.createElement("canvas"), this.blurTempCanvas.width = 50, this.blurTempCanvas.height = 50, this.blurTempCtx = this.blurTempCanvas.getContext("2d")), this.blurTempCtx.clearRect(0, 0, 50, 50);
            var a = 5;
            this.blurTempCtx.drawImage(this.canvas[t], n - a, o - a, i + 2 * a, i + 2 * a, 0, 0, i + 2 * a, i + 2 * a), this.blurInternal(this.blurTempCtx, i / 2 + a, i / 2 + a, i);
            for (var h = 0; 3 > h; h++) this.visibility[h] && (h === t ? r.drawImage(this.blurTempCanvas, a - 2, a - 2, i + 4, i + 4, n - 2, o - 2, i + 4, i + 4) : r.drawImage(this.canvas[h], n - 2, o - 2, i + 4, i + 4, n - 2, o - 2, i + 4, i + 4));
            this.roundRectInternal(r, n - 2.5, o - 2.5, i + 4, i + 4, 3, !1, !0), this.recompose()
        }, t.prototype.setPreviewOpacity = function (t)
        {
            "use strict";
            this.previewCtx.globalAlpha = t
        }, t.prototype.getRawImage = function (t)
        {
            "use strict";
            var e = document.createElement("canvas"),
                s = e.getContext("2d");
            e.width = this.width, e.height = this.height;
            for (var i = 0; 3 > i; i++) s.drawImage(this.canvas[i], this.sx, this.sy, this.width, this.height, 0, 0, this.width, this.height);
            var r = s.getImageData(0, 0, this.width, this.height);
            return new Uint8Array(r.data.buffer)
        }, Object.defineProperty(t.prototype, "segmentCount",
        {
            get: function ()
            {
                "use strict";
                return this.drawnSegments
            },
            enumerable: !0,
            configurable: !0
        }), t
    }(),
    IscOnlineState = function ()
    {
        function t()
        {}
        return t
    }(),
    IscUserMovementInfo = function ()
    {
        function t(t, e, s)
        {
            this.action = t, this.userInfo = new IscUserInfo(e, s)
        }
        return t
    }(),
    IscFriendMovementInfo = function ()
    {
        function t(t, e, s, i)
        {
            this.action = t, this.userInfo = new IscFriendInfo(e, s, i)
        }
        return t
    }(),
    IscUserInfo = function ()
    {
        function t(t, e)
        {
            this.nickName = t, this.state = e
        }
        return t
    }(),
    IscFriendInfo = function ()
    {
        function t(t, e, s)
        {
            this.nickName = t, this.userName = e, this.state = s
        }
        return t
    }(),
    IscTracerInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscMessageInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscBoardInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscRenameInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscLayerLockInfo = function ()
    {
        function t()
        {}
        return t
    }(),
    IscBoardConfig = function ()
    {
        function t()
        {}
        return t
    }(),
    IscLocation = function ()
    {
        function t()
        {}
        return t
    }(),
    IscStaticBoardParameters = function ()
    {
        function t()
        {}
        return t
    }(),
    IscMergeKind;
! function (t)
{
    t[t.Flatten = 0] = "Flatten", t[t.TopToMiddle = 1] = "TopToMiddle", t[t.MiddleToBottom = 2] = "MiddleToBottom", t[t.MiddleToTop = 3] = "MiddleToTop"
}(IscMergeKind || (IscMergeKind = {}));
var IscFailureReason;
! function (t)
{
    t[t.Unavailable = 0] = "Unavailable", t[t.Incorrect = 1] = "Incorrect"
}(IscFailureReason || (IscFailureReason = {}));
var IscConnector = function ()
    {
        function t()
        {
            this.loadingCachingData = new Array, this.loadingCachingIndex = 0, this.loadingModeEnabled = !1, this.continueLoadingDecachingAt = -1, this.loadingDecaching = !1, this.pauseCachingData = null, this.rawBytes = 0, this.rawBytesProgress = 0,
                this.triggers = {}, this.message = new Array, this.keepAliveTimer = 0, this.command2MessageType = {
                    w: "Whisper",
                    T: "Me",
                    t: "Chat",
                    $: "Moderator"
                }, this.command2MovementType = {
                    "=": "LogOff",
                    "-": "Leave",
                    "+": "Enter",
                    "#": "LogOn",
                    "[": "LogOn",
                    "]": "LogOff",
                    "|": "Update"
                }, this.continuing = !1, this.pausedFor = new Array, this.onRenamed = new IscEvent, this.onConnectionError = new IscEvent, this.onConnected = new IscEvent, this.onDisconnected = new IscEvent, this.onLargePacketProgress = new IscEvent, this.onUpdateOption = new IscEvent, this.onCancelDraw = new IscEvent, this.onOfflineMessage = new IscEvent, this.onUpdateUserMode = new IscEvent, this.onBoardTitleChanged = new IscEvent, this.onBoardCategoryChanged = new IscEvent, this.onInitBoard = new IscEvent, this.onLocksUpdated = new IscEvent, this.onClearBoard = new IscEvent, this.onShowAdminMessage = new IscEvent, this.onDraw = new IscEvent, this.onUpdateBoardDescription = new IscEvent, this.onSwitchLocation = new IscEvent, this.onUpdateUserLocation = new IscEvent, this.onUpdateFriend = new IscEvent, this.onUpdateTracer = new IscEvent, this.onUpdateUserState = new IscEvent, this.onUpdateCounters = new IscEvent, this.onOpenPoll = new IscEvent, this.onClosePoll = new IscEvent, this.onServerMessage = new IscEvent, this.onChatMessage = new IscEvent, this.onUpdateUserList = new IscEvent, this.onUpdateFriendList = new IscEvent, this.onNoticeMessageBox = new IscEvent, this.onInfo = new IscEvent, this.onUpdateBoardsList = new IscEvent, this.onLogOnSuccess = new IscEvent, this.onLogOnFailure = new IscEvent, this.onGeneralError = new IscEvent, this.onTrace = new IscEvent, this.onShowReport = new IscEvent
        }
        return t.prototype.connect = function (t)
        {
            var e = this;
            this.disconnect(), this.token = t;
            var s = "ws://" + document.domain + ":8080",
                i = new WebSocket(s, "binary");
            i.binaryType = "arraybuffer", i.onmessage = function (t)
            {
                "use strict";
                return null != e.pauseCachingData ? void e.pauseCachingData.push(t.data) : void e.collectMessage(t.data)
            }, i.onerror = function (t)
            {
                "use strict";
                e.onConnectionError.publish(null)
            }, i.onclose = function (t)
            {
                "use strict";
                e.onDisconnected.publish(null)
            }, this.keepAliveTimer = setInterval(function ()
            {
                "use strict";
                e.sendString("k")
            }, 42e4), this.websocket = i, this.handleMessage = this.connectHandler
        }, t.prototype.toBinary = function (t)
        {
            "use strict";
            var e = new Uint8Array(t.length + 1);
            return Array.prototype.forEach.call(t, function (t, s)
            {
                e[s] = t.charCodeAt(0)
            }), e
        }, t.prototype.utf16To8 = function (t)
        {
            "use strict";
            var e, s, i;
            e = "";
            var r = t.length;
            for (s = 0; r > s; s++) i = t.charCodeAt(s), i >= 1 && 127 >= i ? e += t.charAt(s) : i > 2047 ? (e += String.fromCharCode(224 | i >> 12 & 15), e += String.fromCharCode(128 | i >> 6 & 63), e += String.fromCharCode(128 | i >> 0 & 63)) : (e += String.fromCharCode(192 | i >> 6 & 31), e += String.fromCharCode(128 | i >> 0 & 63));
            return e
        }, t.prototype.sendString = function (t)
        {
            "use strict";
            this.websocket.send(this.toBinary(this.utf16To8(t)))
        }, t.prototype.combineMessages = function (t)
        {
            "use strict";
            for (var e = 0, s = 0; s < t.length; s++) e += t[s].byteLength;
            for (var i = new Uint8Array(e), r = 0, s = 0; s < t.length; s++) i.set(t[s], r), r += t[s].byteLength;
            return i
        }, t.prototype.decompressRawMessage = function (t)
        {
            "use strict";
            var e = this.combineMessages(t),
                s = new Zlib.Inflate(e),
                i = s.decompress(),
                r = new Array;
            r.push(i), this.handleMessage(r)
        }, t.prototype.collectMessage = function (t)
        {
            "use strict";
            if (this.rawBytes > 0)
            {
                var e = this.rawBytes - this.rawBytesProgress,
                    s = new IscProgressInfo;
                if (s.position = this.rawBytesProgress + Math.min(t.byteLength, e), s.total = this.rawBytes, this.onLargePacketProgress.publish(s), t.byteLength >= e)
                {
                    if (this.message.push(new Uint8Array(t.slice(0, e - 1))), this.rawBytesProgress += e, this.decompressRawMessage(this.message), this.rawBytes = 0, this.rawBytesProgress = 0, this.message = new Array, t.byteLength > e) return void this.collectMessage(t.slice(e))
                }
                else this.message.push(new Uint8Array(t)), this.rawBytesProgress += t.byteLength
            }
            else
            {
                for (var i = 0, r = new Uint8Array(t), n = 0; n < r.length; n++)
                    if (0 === r[n] && (this.message.push(new Uint8Array(t.slice(i, n))), this.handleMessage(this.message), this.message = new Array, i = n + 1, this.rawBytes > 0)) return void this.collectMessage(t.slice(i));
                i !== r.length && this.message.push(new Uint8Array(t.slice(i, t.byteLength)))
            }
        }, t.prototype.restSplit = function (t)
        {
            "use strict";
            var e = t.indexOf(",");
            return [t.substring(0, e), t.substring(e + 1)]
        }, t.prototype.decodeUtf8 = function (t, e)
        {
            "use strict";
            for (var s = "", i = 0, r = 0, n = new Array, o = 0; o < t.length; o++)
                for (var a = new Uint8Array(t[o]), h = 0; h < a.length; h++)
                    if (e > 0) e--;
                    else
                    {
                        var c = a[h];
                        if (i > 0 && (n[r++] = c, r === i))
                        {
                            switch (i)
                            {
                            case 2:
                                s += String.fromCharCode((31 & n[0]) << 6 | 63 & n[1]);
                                break;
                            case 3:
                                s += String.fromCharCode((15 & n[0]) << 12 | (63 & n[1]) << 6 | (63 & n[2]) << 0)
                            }
                            r = 0, i = 0
                        }
                        switch (c >> 4)
                        {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            s += String.fromCharCode(c);
                            break;
                        case 12:
                        case 13:
                            n[0] = c, i = 2, r = 1;
                            break;
                        case 14:
                            n[0] = c, i = 3, r = 1
                        }
                    }
            return s
        }, t.prototype.startLoadingMode = function ()
        {
            "use strict";
            this.loadingModeEnabled || (this.loadingModeEnabled = !0, this.loadingDecaching || (this.loadingCachingData = new Array, this.loadingCachingIndex = 0))
        }, t.prototype.setOption = function (t, e)
        {
            "use strict";
            var s = {
                name: t,
                state: e
            };
            this.onUpdateOption.publish(s)
        }, t.prototype.parseOnlineState = function (t)
        {
            "use strict";
            var e = new IscOnlineState;
            switch (e.boardType = "Unknown", e.availability = "Unknown", e.permission = "Unknown", t[0])
            {
            case "i":
                e.boardType = "Invitation";
                break;
            case "o":
                e.boardType = "Open";
                break;
            case "l":
                e.boardType = "Lobby"
            }
            switch (t[1])
            {
            case "p":
                e.availability = "Online";
                break;
            case "a":
                e.availability = "Away"
            }
            switch (t[2])
            {
            case "r":
                e.permission = "Read";
                break;
            case "n":
                e.permission = "Normal"
            }
            return e
        }, t.prototype.parseBoardType = function (t)
        {
            var e = "Unknown";
            switch (t)
            {
            case "i":
                e = "Invitation";
                break;
            case "o":
                e = "Open";
                break;
            case "h":
                e = "Hybrid"
            }
            return e
        }, t.prototype.dataHandler = function (t)
        {
            "use strict";
            var e = new Uint8Array(t[0]),
                s = String.fromCharCode(e[0]);
            if (this.loadingModeEnabled) switch (s)
            {
            case "A":
            case "d":
            case "D":
            case "1":
            case "R":
            case "I":
            case "C":
            case "B":
            case "V":
            case "v":
            case "@":
            case "a":
                return ("C" === s || "B" === s || "@" === s) && this.onCancelDraw.publish(null), this.loadingCachingData.push(t), void this.loadingCachingIndex++
            }
            var i = this.decodeUtf8(t, 1);
            // "D" !== s && window.admin && console.log("Incoming:", s, i.substr(0, 2048));
            try
            {
                switch (s)
                {
                case "O":
                    this.onOfflineMessage.publish(JSON.parse(i));
                    break;
                case "§":
                    switch (i)
                    {
                    case "0":
                        this.onUpdateUserMode.publish("read");
                        break;
                    case "1":
                        this.onUpdateUserMode.publish("chat");
                        break;
                    case "2":
                        this.onUpdateUserMode.publish("draw")
                    }
                    break;
                case ">":
                    if ("report" === i) this.onShowReport.publish(null);
                    else
                    {
                        var r = i.split(",");
                        if ("propose" === r[1]) switch (r[0])
                        {
                        case "disable":
                            this.setOption("enable", !1);
                            break;
                        case "enable":
                            this.setOption("enable", !0)
                        }
                    }
                    break;
                case "/":
                    switch (i)
                    {
                    case "moderator":
                        this.setOption("isMod", !0);
                        break;
                    case "nomoderator":
                        this.setOption("isMod", !1);
                        break;
                    case "publish":
                        this.setOption("publish", !0);
                        break;
                    case "nopublish":
                        this.setOption("publish", !1);
                        break;
                    case "mature":
                        this.setOption("mature", !0);
                        break;
                    case "nomature":
                        this.setOption("mature", !1);
                        break;
                    case "friends":
                        this.setOption("friends", !0);
                        break;
                    case "nofriends":
                        this.setOption("friends", !1);
                        break;
                    case "modmode":
                        this.setOption("modmode", !0);
                        break;
                    case "unmodmode":
                        this.setOption("modmode", !1);
                        break;
                    case "filter":
                        this.setOption("filter", !0);
                        break;
                    case "unfilter":
                        this.setOption("filter", !1)
                    }
                    break;
                case "R":
                    this.onBoardTitleChanged.publish(i);
                    break;
                case "K":
                    this.onBoardCategoryChanged.publish(i);
                    break;
                case "A":
                    var n = new IscBoardConfig;
                    n.simple = i.indexOf("s") >= 0, this.onInitBoard.publish(n);
                case "a":
                    var o = new IscLayerLockInfo;
                    o.layer1Locked = i.indexOf("1") >= 0, o.layer2Locked = i.indexOf("2") >= 0, o.layer3Locked = i.indexOf("3") >= 0, this.onLocksUpdated.publish(o);
                    break;
                case "C":
                    var a = new IscStaticBoardParameters;
                    a.width = 700, a.height = 376, a.bgHex = "#" + ("000000" + (+i).toString(16)).substr(-6), a.protocol = 0, this.onClearBoard.publish(a);
                    break;
                case "B":
                    var a = new IscStaticBoardParameters,
                        h = JSON.parse(i);
                    a.width = h.width, a.height = h.height, a.bgHex = "#" + ("000000" + h.background.toString(16)).substr(-6), a.protocol = h.protocol, this.onClearBoard.publish(a);
                    break;
                case ".":
                    this.rawBytes = +i + 1, this.rawBytesProgress = 0;
                    break;
                case "D":
                    this.onDraw.publish(this.combineMessages(t));
                    break;
                case "Q":
                    this.onUpdateBoardDescription.publish(i);
                    break;
                case "f":
                    var c = new IscLocation;
                    c.name = "board", c.info = JSON.parse(i), this.onSwitchLocation.publish(c);
                    break;
                case "=":
                case "-":
                    var r = i.split(":"),
                        u = new IscUserMovementInfo(this.command2MovementType[s], r[0], null);
                    this.onUpdateUserLocation.publish(u);
                    break;
                case "#":
                case "+":
                    var r = i.split(":"),
                        u = new IscUserMovementInfo(this.command2MovementType[s], r[0], this.parseOnlineState(r[2]));
                    this.onUpdateUserLocation.publish(u);
                    var l = new IscTracerInfo;
                    l.nickName = r[0], l.boardUserId = +r[1], this.onUpdateTracer.publish(l);
                    break;
                case "[":
                case "]":
                case "|":
                    this.onUpdateFriend.publish(this.parseFriendMovement(s, i));
                    break;
                case ";":
                    this.onUpdateFriendList.publish(this.parseFriendList(i));
                    break;
                case "V":
                    this.onUpdateTracer.publish(this.parseTracerInfo(i));
                    break;
                case "~":
                    this.onUpdateUserState.publish(this.parseUserUpdate(i));
                    break;
                case "r":
                    this.onRenamed.publish(this.parseRename(i));
                    break;
                case "u":
                    var r = i.split(","),
                        n = {
                            userCount: +r[0],
                            friendCount: +r[1]
                        };
                    this.onUpdateCounters.publish(n);
                    break;
                case "?":
                    this.onOpenPoll.publish(i);
                    break;
                case "x":
                    this.onClosePoll.publish(null);
                    break;
                case "I":
                    break;
                case "w":
                case "T":
                case "t":
                case "$":
                    var r = this.restSplit(i),
                        d = new IscMessageInfo,
                        p = r[0].split(":");
                    d.nickName = p[0], d.userName = p[1], d.message = r[1], d.type = this.command2MessageType[s], d.type = d.type.toLowerCase(), this.onChatMessage.publish(d);
                    break;
                case "*":
                    for (var n = new Array, f = i.split(","), g = 0; g < f.length; g++)
                    {
                        var r = f[g].split(":"),
                            y = new IscUserInfo(r[0], this.parseOnlineState(r[2]));
                        n.push(y);
                        var l = new IscTracerInfo;
                        l.nickName = r[0], l.boardUserId = +r[1], this.onUpdateTracer.publish(l)
                    }
                    this.onUpdateUserList.publish(n);
                    break;
                case "M":
                    this.onShowAdminMessage.publish(i);
                    break;
                case "m":
                    this.onNoticeMessageBox.publish(i);
                    break;
                case "i":
                    this.onInfo.publish(JSON.parse(i));
                    break;
                case "@":
                    var v = this.parseBoards(i);
                    this.onUpdateBoardsList.publish(v);
                    var w = new IscLocation;
                    w.name = "lobby", w.info = null, this.onSwitchLocation.publish(w), this.sendString("*"), this.onBoardTitleChanged.publish(null)
                }
            }
            catch (b)
            {
                console.error("Dispatching command failed (" + b + "): ", s, i.substr(0, 128))
            }
        }, t.prototype.parseBoards = function (t)
        {
            for (var e = t.split(""), s = new Array, i = 0; i < e.length; i++)
            {
                var r = new Array;
                s.push(r);
                for (var n = e[i].split(""), o = 0; o < n.length; o++)
                {
                    var a = n[o].split("");
                    if (a.length >= 9)
                    {
                        var h = new IscBoardInfo;
                        h.id = +a[0], h.active = "1" === a[1], h.title = a[2], h.nickNames = "" !== a[3] ? a[3].split(", ") : new Array, h.creation = a[4], h.type = this.parseBoardType(a[5]), h.isFavorite = "1" === a[6], h.trustLevel = +a[7], h.category = a[8], h.idleSince = a[9], r.push(h)
                    }
                }
            }
            return s
        }, t.prototype.stopLoadingMode = function ()
        {
            "use strict";
            if (this.loadingModeEnabled && (this.loadingModeEnabled = !1, !this.loadingDecaching))
            {
                this.loadingDecaching = !0;
                for (var t = -1 !== this.continueLoadingDecachingAt ? this.continueLoadingDecachingAt : 0, e = t; e < this.loadingCachingIndex; e++)
                    if (this.dataHandler(this.loadingCachingData[e]), this.loadingModeEnabled) return this.loadingDecaching = !1, void(this.continueLoadingDecachingAt = e + 1);
                this.continueLoadingDecachingAt = -1, this.loadingCachingData = null, this.loadingCachingIndex = -1, this.loadingDecaching = !1
            }
        }, Object.defineProperty(t.prototype, "isLoadingMode",
        {
            get: function ()
            {
                return this.loadingModeEnabled
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.login = function (t, e)
        {
            "use strict";
            this.sendString('%"' + t.replace('"', '""') + '",6.0,0,' + this.token)
        }, t.prototype.connectHandler = function (t)
        {
            "use strict";
            var e = this.decodeUtf8(t, 0);
            switch (e)
            {
            case "s382":
                this.onConnected.publish(null);
                break;
            case "start":
                this.handleMessage = this.dataHandler, this.onLogOnSuccess.publish(null);
                break;
            case "incorrect":
                this.onLogOnFailure.publish(IscFailureReason.Incorrect), this.websocket.close();
                break;
            case "unavailable":
                this.onLogOnFailure.publish(IscFailureReason.Unavailable);
                break;
            default:
                this.onGeneralError.publish(null), this.websocket.close()
            }
        }, t.prototype.requireReady = function (t)
        {
            if (this.pausedFor.indexOf(t) >= 0) throw "Already paused for";
            if (this.continuing) throw "Cannot pause while continueListen is running";
            null == this.pauseCachingData && (this.pauseCachingData = new Array), this.pausedFor.push(t)
        }, t.prototype.notifyReady = function (t)
        {
            var e = this.pausedFor.indexOf(t);
            if (0 > e) throw "Not paused for";
            if (this.continuing) throw "Cannot continue while continueListen is running";
            if (this.pausedFor.splice(e, 1), 0 === this.pausedFor.length)
            {
                this.continuing = !0;
                try
                {
                    var s = this.pauseCachingData;
                    this.pauseCachingData = null;
                    for (var i = 0; i < s.length; i++) this.collectMessage(s[i])
                }
                finally
                {
                    this.continuing = !1
                }
            }
        }, t.prototype.startListen = function ()
        {
            this.handleMessage = this.dataHandler
        }, t.prototype.disconnect = function ()
        {
            "use strict";
            null != this.websocket && (this.websocket.close(), this.websocket = null), clearInterval(this.keepAliveTimer), this.keepAliveTimer = null
        }, t.prototype.whisper = function (t, e)
        {
            "use strict";
            this.sendString("w" + t + "," + e)
        }, t.prototype.me = function (t)
        {
            "use strict";
            this.sendString("T" + t)
        }, t.prototype.join = function (t)
        {
            "use strict";
            this.sendString("J" + +t)
        }, t.prototype.joinUser = function (t)
        {
            "use strict";
            this.sendString("t/join " + t)
        }, t.prototype.lobby = function ()
        {
            "use strict";
            this.sendString("JX")
        }, t.prototype.chat = function (t)
        {
            "use strict";
            this.sendString("t" + t)
        }, t.prototype.pollVoteYes = function ()
        {
            "use strict";
            this.sendString("y")
        }, t.prototype.pollVoteNo = function ()
        {
            "use strict";
            this.sendString("n")
        }, t.prototype.moveTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("M" + (0 | t) + "," + (0 | e))
        }, t.prototype.lineTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("L" + (0 | t) + "," + (0 | e))
        }, t.prototype.blurTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("B" + (0 | t) + "," + (0 | e))
        }, t.prototype.brushTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("Q" + (0 | t) + "," + (0 | e))
        }, t.prototype.autoCircleTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("b" + (0 | t) + "," + (0 | e))
        }, t.prototype.circleTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("r" + (0 | t) + "," + (0 | e))
        }, t.prototype.eraserTo = function (t, e)
        {
            "use strict";
            t += 50, e += 20, this.sendString("}" + (0 | t) + "," + (0 | e))
        }, t.prototype.setColor = function (t)
        {
            "use strict";
            this.sendString("C" + (0 | t))
        }, t.prototype.setBrushSize = function (t)
        {
            "use strict";
            this.sendString("s" + (0 | t))
        }, t.prototype.clear = function (t, e, s)
        {
            "use strict";
            this.sendString("c" + (0 | t) + "," + (0 | e) + "," + (0 | s))
        }, t.prototype.setLayer = function (t)
        {
            this.sendString("{" + (0 | t))
        }, t.prototype.addBoardFavorite = function (t)
        {
            this.sendString("f+" + (0 | t))
        }, t.prototype.removeBoardFavorite = function (t)
        {
            this.sendString("f-" + (0 | t))
        }, t.prototype.getUserInfo = function (t)
        {
            this.sendString("t/info " + t)
        }, t.prototype.addFriend = function (t)
        {
            this.sendString("t/friend " + t)
        }, t.prototype.removeFriend = function (t)
        {
            this.sendString("t/unfriend " + t)
        }, t.prototype.kick = function (t)
        {
            this.sendString("t/kick " + t)
        }, t.prototype.warn = function (t)
        {
            this.sendString("t/warn " + t)
        }, t.prototype.ban = function (t)
        {
            this.sendString("t/ban " + t)
        }, t.prototype.merge = function (t)
        {
            this.sendString("." + (0 | t))
        }, t.prototype.report = function (t)
        {
            this.sendString("R" + t)
        }, t.prototype.updateProposalAvailability = function (t)
        {
            this.sendString(">" + t)
        }, t.prototype.publish = function (t, e, s, i, r)
        {
            if (1052800 !== r.length) throw "Invalid data size";
            var n = new Zlib.Deflate(r),
                o = n.compress();
            this.sendString("!" + t + "\r" + (e ? 1 : 0) + "\r" + s.replace("\r", "") + "\r" + i), this.sendString("_" + o.length), this.websocket.send(o)
        }, t.prototype.parseFriendList = function (t)
        {
            for (var e = new Array, s = t.split(","), i = 0; i < s.length; i++)
            {
                var r = s[i].split(":"),
                    n = new IscFriendInfo(r[0], r[1], this.parseOnlineState(r[2]));
                e.push(n)
            }
            return e
        }, t.prototype.parseFriendMovement = function (t, e)
        {
            var s = e.split(":"),
                i = new IscFriendMovementInfo(this.command2MovementType[t], s[0], s[1], this.parseOnlineState(s[2]));
            return i
        }, t.prototype.parseTracerInfo = function (t)
        {
            var e = t.split(","),
                s = new IscTracerInfo;
            return s.nickName = e[0], s.boardUserId = +e[1], s
        }, t.prototype.parseRename = function (t)
        {
            var e = t.split(":"),
                s = new IscRenameInfo;
            return s.oldNickName = e[0], s.newNickName = e[1], s
        }, t.prototype.parseUserUpdate = function (t)
        {
            var e = t.split(":");
            return new IscUserInfo(e[0], this.parseOnlineState(e[1]))
        }, t.prototype.createNewBoard = function (t, e, s, i, r, n)
        {
            this.sendString("#" + t + "," + e + "," + (s || 700) + "," + (i || 376) + "\r" + r + "\r" + (n || ""))
        }, t.prototype.invokeBoardAction = function (t)
        {
            this.sendString("f" + t)
        }, t.prototype.setSmooth = function (t)
        {
            this.sendString("j" + t)
        }, t
    }(),
    IscMouseAction;
! function (t)
{
    t[t.None = 0] = "None", t[t.ContinuousDrawing = 1] = "ContinuousDrawing", t[t.ContinuousSmoothDrawing = 2] = "ContinuousSmoothDrawing", t[t.SingleDrawing = 3] = "SingleDrawing", t[t.Panning = 4] = "Panning", t[t.Pick = 5] = "Pick"
}(IscMouseAction || (IscMouseAction = {}));
var IscTool;
! function (t)
{
    t[t.Pen = 0] = "Pen", t[t.Picker = 1] = "Picker", t[t.AreaPicker = 2] = "AreaPicker", t[t.Line = 3] = "Line", t[t.Blur = 4] = "Blur", t[t.AutoCircles = 5] = "AutoCircles", t[t.Circles = 6] = "Circles", t[t.Eraser = 8] = "Eraser", t[t.Brush = 9] = "Brush"
}(IscTool || (IscTool = {}));
var IscUserInteractionPainter = function ()
    {
        function t(t, e)
        {
            if (this.first = !1, this.drawn = !1, this.transmittedWidthId = null, this.transmittedColor = null, this.transmittedLayer = null, this.transmittedSmooth = null, this.readOnly = !1, this.brushSizes0 = new Int32Array([1, 2, 3, 5, 14, 30]), this.brushSizes1 = new Int32Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]), this.brushSizes = this.brushSizes0, this.boardType = new IscBoardConfig, this.hasDrawPermission = !1, this.lastShift = !1, this.selectedAreaPickRadius = 3, this.protocol = 0, this.sameCoordinateCounter = 0, this.onColorPick = new IscEvent, null == t) throw "connector is null";
            if (null == e) throw "drawingContext is null";
            this.connector = t, this.iscCanvas = e, this.tool = IscTool.Pen, this.layer = 0, this.brushSize = 1, this.color = 16711680, this.smoothness = 2
        }
        return t.prototype.setInteractionElement = function (t)
        {
            "use strict";
            var e = this;
            if (null != this.element && null != this.undoSetupCanvas && (this.undoSetupCanvas(), this.undoSetupCanvas = null), null != t)
            {
                var s = function (t)
                    {
                        return e.mouseWheel(t), !1
                    },
                    i = function (t)
                    {
                        e.mouseDown(t)
                    },
                    r = function (t)
                    {
                        e.mouseUp(t)
                    },
                    n = function (t)
                    {
                        e.mouseMove(t)
                    },
                    o = function (t)
                    {
                        e.transmittedWidthId = null, e.transmittedColor = null, e.transmittedLayer = null, e.transmittedSmooth = null;
                        var s = e.brushSize;
                        e.protocol = t.protocol, e.brushSizes = 0 === t.protocol ? e.brushSizes0 : e.brushSizes1, e.brushSize = s
                    };
                t.addEventListener("mousedown", i);
                var a = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
                t.addEventListener(a ? "DOMMouseScroll" : "mousewheel", s), document.documentElement.addEventListener("mouseup", r), document.documentElement.addEventListener("mousemove", n);
                var h = function (t)
                    {
                        e.touchDown(t), e.allowTouchScroll || (t.preventDefault(), t.stopPropagation())
                    },
                    c = function (t)
                    {
                        e.touchUp(t), e.allowTouchScroll || (t.preventDefault(), t.stopPropagation())
                    },
                    u = function (t)
                    {
                        e.touchMove(t), e.allowTouchScroll || (t.preventDefault(), t.stopPropagation())
                    };
                this.transmittedWidthId = null, this.transmittedColor = null, this.transmittedLayer = null, this.transmittedSmooth = null, t.addEventListener("touchstart", h), t.addEventListener("touchmove", u), t.addEventListener("touchend", c), this.element = t, this.connector.onClearBoard.subscribe(o), this.undoSetupCanvas = function ()
                {
                    t.removeEventListener("mousedown", i), t.removeEventListener(a ? "DOMMouseScroll" : "mousewheel", s), document.documentElement.removeEventListener("mouseup", r), document.documentElement.removeEventListener("mousemove", n), t.removeEventListener("touchstart", h), t.removeEventListener("touchmove", u), t.removeEventListener("touchend", c), e.connector.onClearBoard.unsubscribe(o), e.element = null
                }
            }
        }, t.prototype.close = function ()
        {
            "use strict";
            this.setInteractionElement(null)
        }, Object.defineProperty(t.prototype, "smoothness",
        {
            get: function ()
            {
                "use strict";
                return this.selectedSmooth
            },
            set: function (t)
            {
                "use strict";
                this.selectedSmooth = t
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.setReadOnly = function (t)
        {
            "use strict";
            this.readOnly = t, this.iscCanvas.setLayerVisibility(this.iscCanvas.getPreviewLayerId(), !t)
        }, t.prototype.touchDown = function (t)
        {
            "use strict";
            var e = t.targetTouches[0];
            this.deviceDown(e.clientX, e.clientY, t.altKey, t.shiftKey, t.ctrlKey)
        }, t.prototype.mouseDown = function (t)
        {
            "use strict";
            this.deviceDown(t.clientX, t.clientY, t.altKey, t.shiftKey, t.ctrlKey)
        }, t.prototype.deviceDown = function (t, e, s, i, r)
        {
            "use strict";
            if (s && i && !r || s && !i && r)
            {
                var n = this.element.getBoundingClientRect(),
                    o = t - n.left,
                    a = e - n.top,
                    h = this.iscCanvas.hostToBoardCoords(o, a);
                if (this.doZoom(i))
                {
                    var c = this.iscCanvas.getZoom();
                    this.iscCanvas.setOffset(-Math.ceil(h.x - o / c), -Math.ceil(h.y + .6 - a / c))
                }
            }
            else
            {
                var n = this.element.getBoundingClientRect();
                if (this.initialX = t - n.left | 0, this.initialY = e - n.top | 0, this.lastX = this.initialX, this.lastY = this.initialY, this.lastShift = !1, s) this.mouseAction = IscMouseAction.Panning, this.startOffset = this.iscCanvas.getOffset();
                else if (this.canDraw) switch (this.selectedTool)
                {
                case IscTool.Pen:
                case IscTool.AutoCircles:
                case IscTool.Blur:
                case IscTool.Circles:
                case IscTool.Eraser:
                    this.mouseAction = IscMouseAction.ContinuousDrawing;
                    break;
                case IscTool.Brush:
                    this.mouseAction = IscMouseAction.ContinuousSmoothDrawing, this.autoMoveTimer = 0;
                    break;
                case IscTool.Line:
                    this.mouseAction = IscMouseAction.SingleDrawing;
                    break;
                case IscTool.Picker:
                case IscTool.AreaPicker:
                    this.mouseAction = IscMouseAction.Pick;
                    var h = this.iscCanvas.hostToBoardCoords(this.lastX, this.lastY);
                    this.pickWithTool(h.x, h.y)
                }
                this.first = !0, this.drawn = !1
            }
        }, t.prototype.touchMove = function (t)
        {
            "use strict";
            var e = t.targetTouches[0];
            this.deviceMove(e.clientX, e.clientY, t.shiftKey)
        }, t.prototype.mouseMove = function (t)
        {
            "use strict";
            this.deviceMove(t.clientX, t.clientY, t.shiftKey)
        }, t.prototype.deviceMove = function (t, e, s)
        {
            "use strict";
            var i = this.element.getBoundingClientRect(),
                r = t - i.left | 0,
                n = e - i.top | 0;
            if (this.lastShift = s, this.iscCanvas.clearPreviewCanvas(), this.canDraw) switch (this.mouseAction)
            {
            case IscMouseAction.ContinuousDrawing:
                var o, a = this.iscCanvas.hostToBoardCoords(this.lastX, this.lastY),
                    h = this.iscCanvas.hostToBoardCoords(r, n),
                    c = Math.abs(h.x - a.x),
                    u = Math.abs(h.y - a.y),
                    l = c * c + u * u,
                    d = this.iscCanvas.getZoom();
                o = d >= 4 ? 1 : d >= 2 ? 2 : 3, l >= o * o && (this.drawn = !0, this.drawWithSelectedTool(a, h), this.lastX = r, this.lastY = n);
                break;
            case IscMouseAction.ContinuousSmoothDrawing:
                var a = this.iscCanvas.hostToBoardCoords(this.lastX, this.lastY),
                    h = this.iscCanvas.hostToBoardCoords(r, n);
                clearTimeout(this.autoMoveTimer);
                var p = 1 - .18 * this.selectedSmooth,
                    f = h.x * p + a.x * (1 - p),
                    g = h.y * p + a.y * (1 - p),
                    c = Math.abs(h.x - f),
                    u = Math.abs(h.y - g),
                    l = Math.sqrt(c * c + u * u);
                l >= 1 && (this.drawn = !0, this.drawWithSelectedTool(a, h), this.lastX = r, this.lastY = n);
                break;
            case IscMouseAction.SingleDrawing:
                var a = this.iscCanvas.hostToBoardCoords(this.initialX, this.initialY),
                    h = this.iscCanvas.hostToBoardCoords(r, n);
                s && this.align(a, h);
                var y = this.iscCanvas.getPreviewLayerId();
                this.iscCanvas.drawLine(y, a.x, a.y, h.x, h.y, this.brushSizes[this.selectedSizeId], this.selectedColor), this.lastX = r, this.lastY = n;
                break;
            case IscMouseAction.Panning:
                var c = r - this.initialX,
                    u = n - this.initialY,
                    d = this.iscCanvas.getZoom();
                this.iscCanvas.setOffset(this.startOffset.x + c / d, this.startOffset.y + u / d);
                break;
            case IscMouseAction.Pick:
                var v = this.iscCanvas.hostToBoardCoords(r, n);
                this.pickWithTool(v.x, v.y);
                break;
            case IscMouseAction.None:
                var a = this.iscCanvas.hostToBoardCoords(r, n);
                switch (this.selectedTool)
                {
                case IscTool.Line:
                case IscTool.Pen:
                case IscTool.Brush:
                    this.iscCanvas.setPreviewOpacity(.7), this.iscCanvas.drawLine(this.iscCanvas.getPreviewLayerId(), a.x, a.y, a.x, a.y, this.brushSizes[this.selectedSizeId], this.selectedColor);
                    break;
                case IscTool.AreaPicker:
                    this.iscCanvas.setPreviewOpacity(.2), this.iscCanvas.drawLine(this.iscCanvas.getPreviewLayerId(), a.x, a.y, a.x, a.y, 2 * this.selectedAreaPickRadius, 0);
                    break;
                case IscTool.AutoCircles:
                    this.iscCanvas.setPreviewOpacity(.2), this.iscCanvas.drawLine(this.iscCanvas.getPreviewLayerId(), a.x, a.y, a.x, a.y, this.brushSizes[this.selectedSizeId], 0);
                    break;
                case IscTool.Blur:
                    this.iscCanvas.setPreviewOpacity(1), this.iscCanvas.drawBlurPreview(this.selectedLayer, a.x, a.y, this.brushSizes[this.selectedSizeId]);
                    break;
                case IscTool.Circles:
                    this.iscCanvas.setPreviewOpacity(.5), this.iscCanvas.drawCircle(this.iscCanvas.getPreviewLayerId(), a.x, a.y, this.brushSizes[this.selectedSizeId], this.selectedColor);
                    break;
                case IscTool.Eraser:
                    this.iscCanvas.setPreviewOpacity(.2), this.iscCanvas.drawEraserPreview(a.x, a.y, this.brushSizes[this.selectedSizeId]);
                    break;
                case IscTool.Picker:
                }
            }
            else
            {
                this.mouseAction = IscMouseAction.None;
                var v = this.iscCanvas.hostToBoardCoords(r, n),
                    y = this.iscCanvas.getPreviewLayerId();
                this.iscCanvas.drawLine(y, v.x - 5, v.y - 5, v.x + 5, v.y + 5, 3, 0), this.iscCanvas.drawLine(y, v.x + 5, v.y - 5, v.x - 5, v.y + 5, 3, 0)
            }
        }, t.prototype.pickWithTool = function (t, e)
        {
            "use strict";
            switch (this.selectedTool)
            {
            case IscTool.AreaPicker:
                var s = this.iscCanvas.areaPick(t, e, 2 * this.selectedAreaPickRadius);
                this.onColorPick.publish(s);
                break;
            case IscTool.Picker:
                var s = this.iscCanvas.pick(t, e);
                this.onColorPick.publish(s)
            }
        }, Object.defineProperty(t.prototype, "areaPickRadius",
        {
            get: function ()
            {
                "use strict";
                return this.selectedAreaPickRadius
            },
            set: function (t)
            {
                "use strict";
                this.selectedAreaPickRadius = t
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.mouseUp = function (t)
        {
            "use strict";
            this.deviceUp()
        }, t.prototype.touchUp = function (t)
        {
            "use strict";
            this.deviceUp()
        }, t.prototype.deviceUp = function ()
        {
            "use strict";
            if (this.canDraw) switch (this.mouseAction)
            {
            case IscMouseAction.SingleDrawing:
                var t = this.iscCanvas.hostToBoardCoords(this.initialX, this.initialY),
                    e = this.iscCanvas.hostToBoardCoords(this.lastX, this.lastY);
                this.lastShift && this.align(t, e), this.drawWithSelectedTool(t, e);
                break;
            case IscMouseAction.ContinuousDrawing:
                if (!this.drawn)
                {
                    var t = this.iscCanvas.hostToBoardCoords(this.lastX, this.lastY);
                    this.drawWithSelectedTool(t, t);
                    break
                }
                break;
            case IscMouseAction.ContinuousSmoothDrawing:
                clearTimeout(this.autoMoveTimer)
            }
            this.cancelPendingToolActions()
        }, t.prototype.cancelPendingToolActions = function ()
        {
            this.mouseAction = IscMouseAction.None, this.iscCanvas.clearPreviewCanvas()
        }, t.prototype.align = function (t, e)
        {
            "use strict";
            var s, i = e.x - t.x,
                r = e.y - t.y;
            switch (Math.round(Math.atan2(r, i) / Math.PI * 4))
            {
            case -4:
            case 0:
            case 4:
                r = 0;
                break;
            case -2:
            case 2:
                i = 0;
                break;
            case 1:
                s = Math.round((i + r) / 2), i = s, r = s;
                break;
            case 3:
                s = Math.round((-i + r) / 2), i = -s, r = s;
                break;
            case -3:
                s = Math.round((-i - r) / 2), i = -s, r = -s;
                break;
            case -1:
                s = Math.round((i - r) / 2), i = s, r = -s
            }
            e.x = t.x + i, e.y = t.y + r
        }, t.prototype.drawWithSelectedTool = function (t, e)
        {
            "use strict";
            switch (this.ensureLayer(this.selectedLayer), this.first && (this.first = !1, this.connector.moveTo(t.x, t.y)), this.selectedTool)
            {
            case IscTool.Pen:
            case IscTool.Line:
                this.ensureWidth(this.selectedSizeId), this.ensureColor(this.selectedColor), this.connector.lineTo(e.x, e.y), this.iscCanvas.drawLine(this.selectedLayer, t.x, t.y, e.x, e.y, this.brushSizes[this.selectedSizeId], this.selectedColor);
                break;
            case IscTool.AutoCircles:
                this.ensureWidth(this.selectedSizeId), this.connector.autoCircleTo(e.x, e.y), this.iscCanvas.drawAutoCircle(this.selectedLayer, t.x, t.y, this.brushSizes[this.selectedSizeId]);
                break;
            case IscTool.Circles:
                this.ensureWidth(this.selectedSizeId), this.ensureColor(this.selectedColor), this.connector.circleTo(e.x, e.y), this.iscCanvas.drawCircle(this.selectedLayer, t.x, t.y, this.brushSizes[this.selectedSizeId], this.selectedColor);
                break;
            case IscTool.Eraser:
                this.ensureWidth(this.selectedSizeId), this.connector.eraserTo(e.x, e.y), this.iscCanvas.drawEraser(this.selectedLayer, t.x, t.y, this.brushSizes[this.selectedSizeId]);
                break;
            case IscTool.Blur:
                this.ensureWidth(this.selectedSizeId), this.connector.blurTo(e.x, e.y), this.iscCanvas.drawBlur(this.selectedLayer, t.x, t.y, this.brushSizes[this.selectedSizeId]);
                break;
            case IscTool.Brush:
                return this.ensureWidth(this.selectedSizeId), this.ensureColor(this.selectedColor), this.ensureSmooth(this.selectedSmooth), this.connector.brushTo(e.x, e.y), this.iscCanvas.drawBrush(this.selectedLayer, t.x, t.y, e.x, e.y, this.brushSizes[this.selectedSizeId], this.selectedColor, this.selectedSmooth)
            }
        }, t.prototype.ensureWidth = function (t)
        {
            "use strict";
            (null == this.transmittedWidthId || this.transmittedWidthId !== t) && (this.connector.setBrushSize(t), this.transmittedWidthId = t)
        }, t.prototype.ensureColor = function (t)
        {
            "use strict";
            (null == this.transmittedColor || this.transmittedColor !== t) && (this.connector.setColor(t), this.transmittedColor = t)
        }, t.prototype.ensureLayer = function (t)
        {
            "use strict";
            (null == this.transmittedLayer || this.transmittedLayer !== t) && (this.connector.setLayer(t), this.transmittedLayer = t)
        }, t.prototype.ensureSmooth = function (t)
        {
            "use strict";
            (null == this.transmittedSmooth || this.transmittedSmooth !== t) && (this.connector.setSmooth(t), this.transmittedSmooth = t)
        }, t.prototype.doZoom = function (t)
        {
            "use strict";
            var e = this.iscCanvas.getZoom();
            return t ? (e *= 2, e > 16 && (e = 16)) : (e /= 2, 1 > e && (e = 1)), this.iscCanvas.getZoom() === e ? !1 : (this.iscCanvas.setZoom(e), !0)
        }, t.prototype.mouseWheel = function (t)
        {
            "use strict";
            var e = this.element.getBoundingClientRect(),
                s = t.clientX - e.left,
                i = t.clientY - e.top,
                r = this.iscCanvas.hostToBoardCoords(s, i);
            if (this.doZoom((t.wheelDeltaY || t.wheelDelta || -t.detail) > 0))
            {
                var n = this.iscCanvas.getZoom();
                this.iscCanvas.setOffset(-Math.ceil(r.x - s / n), -Math.ceil(r.y - i / n))
            }
        }, Object.defineProperty(t.prototype, "tool",
        {
            get: function ()
            {
                "use strict";
                return this.selectedTool
            },
            set: function (t)
            {
                "use strict";
                this.selectedTool = t, this.cancelPendingToolActions()
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "color",
        {
            get: function ()
            {
                "use strict";
                return this.selectedColor
            },
            set: function (t)
            {
                "use strict";
                this.selectedColor = t
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "brushSize",
        {
            get: function ()
            {
                "use strict";
                return this.brushSizes[this.selectedSizeId]
            },
            set: function (t)
            {
                "use strict";
                if (0 === this.protocol) switch (t)
                {
                case 1:
                    this.selectedSizeId = 0;
                    break;
                case 2:
                    this.selectedSizeId = 1;
                    break;
                case 3:
                    this.selectedSizeId = 2;
                    break;
                case 5:
                    this.selectedSizeId = 3;
                    break;
                case 14:
                    this.selectedSizeId = 4;
                    break;
                case 30:
                    this.selectedSizeId = 5;
                    break;
                default:
                    throw "Unsupported width"
                }
                else
                {
                    if (t > 31) throw "Unsupported width";
                    this.selectedSizeId = t - 1
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "layer",
        {
            get: function ()
            {
                "use strict";
                return this.selectedLayer
            },
            set: function (t)
            {
                "use strict";
                this.selectedLayer = t
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.setLayerVisibility = function (t, e)
        {
            "use strict";
            if (t > 3) throw "Invalid layer";
            this.iscCanvas.setLayerVisibility(t, e)
        }, t.prototype.getLayerVisibility = function (t)
        {
            "use strict";
            return this.iscCanvas.getLayerVisibility(t)
        }, t.prototype.isSimpleTool = function (t)
        {
            "use strict";
            return t === IscTool.Pen || t === IscTool.Line || t === IscTool.Picker || t === IscTool.AreaPicker || t === IscTool.Eraser
        }, Object.defineProperty(t.prototype, "canDraw",
        {
            get: function ()
            {
                "use strict";
                var t = !this.readOnly && !this.iscCanvas.getLayerLock(this.selectedLayer) && this.iscCanvas.getLayerVisibility(this.selectedLayer) && this.hasDrawPermission;
                return this.selectedTool === IscTool.Brush && 0 === this.iscCanvas.protocol ? !1 : t && (!this.boardType.simple || 0 === this.selectedLayer && this.isSimpleTool(this.selectedTool))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(t.prototype, "allowTouchScroll",
        {
            get: function ()
            {
                "use strict";
                return this.tool === IscTool.AreaPicker || this.tool === IscTool.Picker
            },
            enumerable: !0,
            configurable: !0
        }), t.prototype.setBoardType = function (t)
        {
            "use strict";
            if (null == t) throw "board type is null";
            this.boardType = t
        }, t.prototype.getBoardType = function ()
        {
            "use strict";
            return this.boardType
        }, t.prototype.setHasDrawPermission = function (t)
        {
            "use strict";
            this.hasDrawPermission = t
        }, t
    }(),
    IscConnectionPeerPainter = function ()
    {
        function t(t, e)
        {
            var s = this;
            if (this.nicks = new Array, this.state = "uninitialized", this.drawing = !1, this.cancelDrawNext = !1, this.drawBuffer = new Array, this.drawBufferTimer = 0, this.onProgress = new IscEvent, this.onLoadingStateChanged = new IscEvent, "uninitialized" !== this.state) throw "Wrong state";
            this.connector = t, this.iscCanvas = e, this.iscCanvas.getTracerCaption = function (t, e)
            {
                return s.nicks[e] ? s.nicks[e] : "#" + e + "/" + t
            }, this.state = "initialized";
            var i = function (t)
                {
                    if (t.length < 20) s.drawBuffered(t);
                    else
                    {
                        s.onLoadingStateChanged.publish(!0), s.connector.startLoadingMode(), s.iscCanvas.isTracingEnabled = !1;
                        var e = Date.now();
                        s.drawAsync(t, function ()
                        {
                            var t = Date.now();
                            // console.log("Board loaded in", ((t - e) / 1e3).toString() + " s"), s.connector.stopLoadingMode(), s.iscCanvas.expireTracers(), s.iscCanvas.isTracingEnabled = !0, s.onProgress.publish(1), s.onLoadingStateChanged.publish(!1)
                        }, function (t)
                        {
                            s.onProgress.publish(t.position / t.total)
                        })
                    }
                },
                r = function (t)
                {
                    s.updateLiveTracer(t.boardUserId, t.nickName)
                },
                n = function (t)
                {
                    s.clear(t)
                },
                o = function ()
                {
                    s.cancelDraw()
                };
            this.connector.onDraw.subscribe(i), this.connector.onUpdateTracer.subscribe(r),
                this.connector.onClearBoard.subscribe(n), this.connector.onCancelDraw.subscribe(o), this.undoSetupCanvas = function ()
                {
                    s.connector.onDraw.unsubscribe(i), s.connector.onUpdateTracer.unsubscribe(r), s.connector.onClearBoard.unsubscribe(n), s.connector.onCancelDraw.unsubscribe(o)
                }
        }
        return t.prototype.close = function ()
        {
            "use strict";
            if (null === this.undoSetupCanvas) throw "Already closed";
            this.undoSetupCanvas(), this.undoSetupCanvas = null
        }, t.prototype.cancelDraw = function ()
        {
            "use strict";
            this.cancelDrawNext = !0, this.drawBufferTimer > 0 && (clearTimeout(this.drawBufferTimer), this.drawBufferTimer = 0, this.drawBuffer = new Array)
        }, t.prototype.clear = function (t)
        {
            "use strict";
            clearTimeout(this.drawBufferTimer), this.drawBufferTimer = 0, this.drawBuffer = new Array, this.iscCanvas.protocol = t.protocol, this.iscCanvas.setBgFill(t.bgHex), this.iscCanvas.setSize(t.width, t.height), this.iscCanvas.clearCanvas()
        }, t.prototype.draw = function (t)
        {
            "use strict";
            if (this.drawing) throw "Drawing in progress";
            this.iscCanvas.setStream(t, 1), this.iscCanvas.drawFrames()
        }, t.prototype.drawBuffered = function (t)
        {
            "use strict";
            var e = this;
            if (this.drawing) throw "Drawing in progress";
            this.drawBuffer.push(t), 0 === this.drawBufferTimer && (this.drawBufferTimer = setTimeout(function ()
            {
                e.liveDrawOne()
            }, 32))
        }, t.prototype.liveDrawOne = function ()
        {
            "use strict";
            for (var t = this, e = 0; e < Math.ceil(this.drawBuffer.length / 50); e++)
            {
                var s = this.drawBuffer.shift();
                this.draw(s)
            }
            this.drawBuffer.length > 0 ? this.drawBufferTimer = setTimeout(function ()
            {
                t.liveDrawOne()
            }, Math.ceil(150 / (this.drawBuffer.length + 5))) : this.drawBufferTimer = 0
        }, t.prototype.drawAsync = function (t, e, s)
        {
            "use strict";
            var i = this;
            if (this.drawing) throw "Drawing in progress";
            this.drawing = !0, this.iscCanvas.setStream(t, 1);
            var r = Date.now();
            this.timer = setInterval(function ()
            {
                if (i.cancelDrawNext) return i.cancelDrawNext = !1, clearInterval(i.timer), i.timer = null, i.drawing = !1, void e();
                var t = Date.now();
                t - r > 100 && (r = t, s(i.iscCanvas.getProgress()));
                var n = i.iscCanvas.drawFrames(200);
                n && (clearInterval(i.timer), i.timer = null, i.drawing = !1, e())
            }, 1)
        }, t.prototype.updateLiveTracer = function (t, e)
        {
            "use strict";
            this.nicks[t] = e
        }, t
    }(),
    Replay = function ()
    {
        function t()
        {
            this.speed = 8, this.state = "uninitialized", this.canvas = new IscCanvas(!1)
        }
        return t.prototype.setHtmlCanvas = function (t)
        {
            "use strict";
            this.canvas.setHtmlCanvas(t)
        }, t.prototype.setDrawing = function (e, s)
        {
            "use strict";
            var i = this;
            this.id = e, t.getMeta(e, function (t)
            {
                null != t ? (i.state = "initialized", i.canvas.getTracerCaption = function (e, s)
                {
                    return t.users[e]
                }, i.load(t, function (t)
                {
                    t ? (i.instruction = t, s()) : s()
                })) : s()
            })
        }, t.prototype.setSpeed = function (t)
        {
            "use strict";
            this.speed = t
        }, t.prototype.setShowTracers = function (t)
        {
            "use strict";
            this.canvas.showTracers = t
        }, t.prototype.getShowTracers = function ()
        {
            "use strict";
            return this.canvas.showTracers
        }, t.prototype.getState = function ()
        {
            "use strict";
            return this.state
        }, t.getMeta = function (t, e)
        {
            "use strict";

            // var metaData = "787188.isz\nRIP v2\n23430:rohtie,202777:OhFudge,410738:c0ffeebean\n";

            // Also works, but names dont show
            var metaData = "787188.isz\n\n\n";

            for (var r = metaData.split("\n"), n = r[2].split(","), o = {}, a = 0; a < n.length; a++)
            {
                var h = n[a].split(":");
                o[h[0]] = h[1]
            }
            e(
            {
                url: r[0],
                users: o,
                id: t
            })


            // var s = new XMLHttpRequest;
            // s.open("GET", "/gallery/meta.php?id=" + t, !0), s.onreadystatechange = function (i)
            // {
            //     if (4 === s.readyState)
            //         if (200 === s.status)
            //         {
            //             for (var r = s.responseText.split("\n"), n = r[2].split(","), o = {}, a = 0; a < n.length; a++)
            //             {
            //                 var h = n[a].split(":");
            //                 o[h[0]] = h[1]
            //             }
            //             e(
            //             {
            //                 url: r[0],
            //                 users: o,
            //                 id: t
            //             })
            //         }
            //     else e(null)
            // }, s.send()
        }, t.prototype.countStat = function ()
        {
            "use strict";
            var t = new XMLHttpRequest;
            t.open("GET", "/gallery/countstat.php?id=" + this.id, !0), t.send()
        }, t.prototype.load = function (t, e)
        {
            // console.log("actually loading");

            "use strict";

            var s = this;
            if ("initialized" !== this.state) throw "Wrong state";
            this.id = t.id;
            var i = new XMLHttpRequest;
            i.open("GET", t.url, !0), i.responseType = "arraybuffer", i.onreadystatechange = function (r)
            {
                if (4 === i.readyState)
                {
                    switch (i.status)
                    {
                    case 200:
                        try
                        {
                            // console.log("got the file");

                            var n, o;
                            if (t.url.match(/.isc$/)) {
                                // console.log("match");

                                n = new Uint8Array(i.response);
                            }
                            else
                            {
                                // console.log("no match");

                                var a = i.response;
                                o = new Uint8Array(a, 36);

                                var h = new Zlib.Inflate(o);

                                n = h.decompress()
                                // console.log(n);
                            }

                            return s.state = "stopped", void e(n)
                        }
                        catch (r)
                        {
                            s.state = "error"
                        }
                        return void e(null);
                    case 404:
                        s.state = "notfound";
                        break;
                    default:
                        s.state = "error"
                    }
                    e(null)
                }
            }, i.send(null)

            // console.log("wtf");
        }, t.prototype.play = function ()
        {
            // console.log("start playing");

            "use strict";
            var t = this;
            switch (this.state)
            {
            case "stopped":
                this.rewind(), this.canvas.clearCanvas(), this.initiateDrawing(), this.countStat();
                break;
            case "paused":
                this.timer = setInterval(function ()
                {
                    return t.frameDrawer()
                }, 1);
                break;
            case "playing":
                break;
            default:
                throw "wrong state"
            }
            this.state = "playing"
        }, t.prototype.pause = function ()
        {
            "use strict";
            switch (this.state)
            {
            case "playing":
                clearInterval(this.timer), this.timer = null;
                break;
            case "stopped":
            case "paused":
                throw "wrong state";
            default:
                return
            }
            this.state = "paused"
        }, t.prototype.stop = function ()
        {
            "use strict";
            switch (this.state)
            {
            case "playing":
            case "paused":
                clearInterval(this.timer), this.timer = null, this.rewind();
                break;
            case "stopped":
                break;
            default:
                throw "wrong state"
            }
            this.state = "stopped"
        }, t.prototype.frameDrawer = function ()
        {
            "use strict";
            var t = this.canvas.drawFrames(this.speed);
            t && this.stop()
        }, t.prototype.initiateDrawing = function ()
        {
            "use strict";
            var t = this;
            this.timer = setInterval(function ()
            {
                return t.frameDrawer()
            }, 1)
        }, t.prototype.rewind = function ()
        {
            "use strict";
            this.canvas.setStream(this.instruction, 0), this.canvas.readHeader()
        }, t
    }(),
    Player = function ()
    {
        function t()
        {
            this.controls = {}, this.knownControls = ["slow", "medium", "fast", "tags"]
        }
        return t.prototype.initialize = function (t, e, s)
        {
            "use strict";
            for (this.canvas = document.getElementById(t), this.replayControls = document.getElementById(e), this.replayPlay = document.getElementById(s); this.canvas.firstChild;) this.canvas.removeChild(this.canvas.firstChild);
            this.replay = new Replay;
            var i = this.replayControls.children;
            for (var r in i)
                if (i.hasOwnProperty(r))
                {
                    var n = i[r];
                    if ("DIV" === n.nodeName)
                    {
                        var o = n.getAttribute("data-id");
                        this.knownControls.indexOf(o) >= 0 && (this.controls[o] = n)
                    }
                }
            this.setSpeed("medium"), this.refreshTags()
        }, t.prototype.setupCanvas = function ()
        {
            "use strict";
            var t = document.createElement("div");
            t.id = "layers";
            var e = document.createElement("canvas");
            return e.width = 700, e.height = 376, t.appendChild(e), this.canvas.appendChild(t), e
        }, t.prototype.refreshTags = function ()
        {
            "use strict";
            var t = this.replay.getShowTracers();
            this.controls.tags.className = t ? "selected" : "unselected"
        }, t.prototype.load = function (t, e)
        {
            // console.log("loading");

            "use strict";
            var s = this;
            this.replay.setDrawing(t, function ()
            {
                switch (s.replay.getState())
                {
                case "stopped":
                    s.replayInitialized = !0, s.replayControls.style.display = "block", s.replayPlay.style.display = "none", s.replay.setHtmlCanvas(s.setupCanvas()), e();
                    break;
                case "notfound":
                    s.canvas.innerHTML = '<div class="replayerror">A replay is not available for this drawing.</div>';
                    break;
                case "error":
                    s.canvas.innerHTML = '<div class="replayerror">The replay could not be loaded.</div>'
                }
            })
        }, t.prototype.togglePlay = function ()
        {
            "use strict";
            if (this.replayInitialized) switch (this.replay.getState())
            {
            case "playing":
                this.replay.pause();
                break;
            case "stopped":
            case "paused":
                this.replay.play()
            }
        }, t.prototype.setSpeed = function (t)
        {
            "use strict";
            switch (this.controls.slow.className = "unselected", this.controls.medium.className = "unselected", this.controls.fast.className = "unselected", t)
            {
            case "slow":
                this.replay.setSpeed(1), this.controls.slow.className = "selected";
                break;
            case "medium":
                this.replay.setSpeed(8), this.controls.medium.className = "selected";
                break;
            case "fast":
                this.replay.setSpeed(40), this.controls.fast.className = "selected"
            }
        }, t.prototype.toggleTags = function ()
        {
            "use strict";
            this.replay.setShowTracers(!this.replay.getShowTracers()), this.refreshTags()
        }, t
    }(),
    player;